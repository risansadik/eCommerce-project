<!DOCTYPE html>
<html>

<head>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        :root {
            --bg-primary: #1a1a1a;
            --bg-secondary: #232323;
            --bg-sidebar: #1E1E1E;
            --text-primary: #ffffff;
            --text-secondary: #a0a0a0;
            --accent-blue: #0095ff;
            --green: #4CAF50;
            --red: #dc3545;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-color: var(--bg-primary);
            color: var(--text-primary);
            font-family: Arial, sans-serif;
            min-height: 100vh;
        }

        .layout {
            display: flex;
        }

        .sidebar {
            width: 250px;
            background-color: var(--bg-sidebar);
            min-height: 100vh;
            padding: 20px 0;
        }

        .sidebar-menu {
            list-style: none;
        }

        .sidebar-menu li {
            padding: 12px 24px;
            color: var(--text-secondary);
            cursor: pointer;
        }

        .sidebar-menu li.active {
            color: var(--text-primary);
            background-color: var(--bg-primary);
        }

        .main-content {
            flex: 1;
            padding: 24px;
        }

        .order-card {
            background-color: var(--bg-secondary);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .search-bar {
            width: 100%;
            padding: 12px;
            background-color: rgba(255, 255, 255, 0.1);
            border: none;
            border-radius: 6px;
            color: var(--text-primary);
            margin-bottom: 24px;
        }

        .orders-table {
            width: 100%;
            border-collapse: collapse;
        }

        .orders-table th,
        .orders-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid var(--bg-secondary);
        }

        .status-select {
            background-color: var(--bg-primary);
            color: var(--text-primary);
            padding: 8px;
            border-radius: 4px;
            border: 1px solid var(--text-secondary);
        }

        .btn {
            padding: 8px 16px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            color: white;
            margin-right: 10px;
        }

        .btn-primary {
            background-color: var(--accent-blue);
        }

        .btn-danger {
            background-color: var(--red);
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .view-details {
            color: var(--accent-blue);
            text-decoration: none;
            margin-left: 20px;
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.9em;
        }

        .status-pending {
            background-color: #ffa500;
        }

        .status-processing {
            background-color: var(--accent-blue);
        }

        .status-shipped {
            background-color: var(--green);
        }

        .status-delivered {
            background-color: var(--green);
        }

        .status-cancelled {
            background-color: var(--red);
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .order-header small {
            color: var(--text-secondary);
            display: block;
            margin-top: 4px;
        }

        .orders-table tr:last-child td {
            border-top: 1px solid var(--text-secondary);
            padding-top: 16px;
            margin-top: 8px;
        }

        .customer-info {
            padding: 15px;
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .product-info {
            border-left: 3px solid var(--accent-blue);
            padding-left: 12px;
            margin: 10px 0;
        }

        .total-info {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid var(--text-secondary);
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .orders-table td {
            padding: 12px;
            line-height: 1.6;
        }

        .tabs {
            display: flex;
            margin-bottom: 24px;
            border-bottom: 1px solid var(--bg-secondary);
        }

        .tab {
            padding: 12px 24px;
            cursor: pointer;
            color: var(--text-secondary);
            border-bottom: 2px solid transparent;
            background: none;
            border: none;
            font-size: 16px;
        }

        .tab.active {
            color: var(--text-primary);
            border-bottom: 2px solid var(--accent-blue);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }
        .pagination-container {
        margin-top: 20px;
        display: flex;
        justify-content: center;
    }
    
    .pagination {
        display: flex;
        gap: 8px;
    }
    
    .pagination-link {
        padding: 8px 12px;
        background-color: var(--bg-secondary);
        color: var(--text-secondary);
        border-radius: 4px;
        text-decoration: none;
        transition: background-color 0.3s;
    }
    
    .pagination-link:hover {
        background-color: var(--accent-blue);
        color: white;
    }
    
    .pagination-link.current {
        background-color: var(--accent-blue);
        color: white;
    }
    </style>
</head>

<body>
    <div class="layout">
        <nav class="sidebar">
            <ul class="sidebar-menu">
                <a style="text-decoration: none;" href="/admin/sales-report">
                    <li>Dashboard</li>
                </a>
                <a style="text-decoration: none;" href="/admin/users">
                    <li>Customers</li>
                </a>
                <a style="text-decoration: none;" href="/admin/category">
                    <li>Category</li>
                </a>
                <a style="text-decoration: none;" href="/admin/addProducts">
                    <li>Add product</li>
                </a>
                <a style="text-decoration: none;" href="/admin/products">
                    <li>Products</li>
                </a>
                <a style="text-decoration: none;" href="/admin/coupons">
                    <li>Coupon</li>
                </a>
                <a style="text-decoration: none;" href="#">
                    <li>Banner</li>
                </a>
                <a style="text-decoration: none;" href="/admin/addProducts">
                    <li>Add product</li>
                </a>
                <a style="text-decoration: none;" href="/admin/orders">
                    <li class="active">Orders</li>
                </a>
                <a style="text-decoration: none;" href="/admin/logout">
                    <li>Logout</li>
                </a>
            </ul>
        </nav>

        <main class="main-content">
            <div class="tabs">
                <button class="tab <%= activeTab === 'orders' ? 'active' : '' %>" onclick="switchTab('orders')">Orders</button>
                <button class="tab <%= activeTab === 'returns' ? 'active' : '' %>" onclick="switchTab('returns')">Return Requests</button>
            </div>
        
            <input type="search" class="search-bar" placeholder="<%= activeTab === 'orders' ? 'Search orders by ID or customer name' : 'Search return requests by ID or customer name' %>">

            
            <!-- Orders Tab -->
            <div id="orders-tab" class="tab-content <%= activeTab === 'orders' ? 'active' : '' %>">
                <% orders.forEach(order => { %>
                    <div class="order-card">
                        <div class="order-header">
                            <h3>Order #<%= order.orderId %></h3>
                            <div>
                                <select class="status-select"
                                    onchange="updateOrderStatus('<%= order.orderId %>', this.value)"
                                    <%= (order.status === 'Cancelled' || order.status === 'Delivered' || order.status === 'Return Request' || order.status === 'Returned') ? 'disabled' : '' %>>
                                    <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                    <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                    <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                    <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                    <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                    <% if (order.status === 'Return Request') { %>
                                        <option value="Return Request" selected>Return Request</option>
                                    <% } %>
                                    <% if (order.status === 'Returned') { %>
                                        <option value="Returned" selected>Returned</option>
                                    <% } %>
                                </select>
                            </div>
                        </div>
        
                        <table class="orders-table">
                            <tr>
                                <td class="customer-info">
                                    <strong>Customer:</strong> <%= order.address.name %><br>
                                    <strong>Address:</strong> <%= `${order.address.street}, ${order.address.city}, ${order.address.state}, ${order.address.pincode}` %><br>
                                    <strong>Contact:</strong> <%= order.address.phone %>
                                </td>
                            </tr>
                            <% order.orderedItems.forEach(item => { %>
                                <tr class="product-info">
                                    <td>
                                        <strong>Product:</strong> <%= item.product.productName %><br>
                                        <strong>Quantity:</strong> <%= item.quantity %> x ₹<%= item.price %>
                                    </td>
                                </tr>
                            <% }); %>
                            <tr class="total-info">
                                <td>
                                    <strong>Total Price:</strong> ₹<%= order.totalPrice %><br>
                                    <strong>Final Amount:</strong> ₹<%= order.finalAmount %>
                                </td>
                            </tr>
                        </table>
                    </div>
                <% }); %>
                <% if (totalPages > 1) { %>
                    <div class="pagination-container">
                        <div class="pagination">
                            <% if (currentPage > 1) { %>
                                <a href="/admin/orders?page=1&tab=orders" class="pagination-link">First</a>
                                <a href="/admin/orders?page=<%= currentPage - 1 %>&tab=orders" class="pagination-link">Previous</a>
                            <% } %>
                            
                            <% for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) { %>
                                <a href="/admin/orders?page=<%= i %>&tab=orders" class="pagination-link <%= i === currentPage ? 'current' : '' %>"><%= i %></a>
                            <% } %>
                            
                            <% if (currentPage < totalPages) { %>
                                <a href="/admin/orders?page=<%= currentPage + 1 %>&tab=orders" class="pagination-link">Next</a>
                                <a href="/admin/orders?page=<%= totalPages %>&tab=orders" class="pagination-link">Last</a>
                            <% } %>
                        </div>
                    </div>
                <% } else if (orders.length === 0) { %>
                    <p>No orders found.</p>
                <% } %>
            </div>

             <!-- Returns Tab -->
           <div id="returns-tab" class="tab-content <%= activeTab === 'returns' ? 'active' : '' %>">
            <% if (typeof returnRequests !== 'undefined' && returnRequests && returnRequests.length > 0) { %>
                <% returnRequests.forEach(function(request) { %>
                    <div class="order-card">
                        <div class="order-header">
                            <h3>Return Request #<%= request._id %></h3>
                            <div>
                                <span class="status-badge status-<%= request.returnStatus ? request.returnStatus.toLowerCase() : 'pending' %>">
                                    <%= request.returnStatus || 'Pending' %>
                                </span>
                            </div>
                        </div>
    
                        <table class="orders-table">
                            <tr>
                                <td class="customer-info">
                                    <strong>Order ID:</strong> #<%= request.orderId ? request.orderId.orderId : 'N/A' %><br>
                                    <strong>Customer:</strong> <%= request.userId ? request.userId.name : 'N/A' %><br>
                                    <strong>Reason:</strong> <%= request.returnReason || 'N/A' %>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <strong>Refund Amount:</strong> ₹<%= request.refundAmount || '0' %>
                                </td>
                            </tr>
                        </table>
    
                        <div class="action-buttons">
                            <% if (request.returnStatus === 'Pending') { %>
                                <button onclick="approveReturnRequest('<%= request._id %>')" class="btn btn-primary">Approve</button>
                                <button onclick="rejectReturnRequest('<%= request._id %>')" class="btn btn-danger">Reject</button>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
                <% if (totalReturnPages > 0) { %>
                    <div class="pagination-container">
                        <div class="pagination">
                            <% if (currentPage > 1) { %>
                                <a href="/admin/orders?page=1&tab=returns" class="pagination-link">First</a>
                                <a href="/admin/orders?page=<%= currentPage - 1 %>&tab=returns" class="pagination-link">Previous</a>
                            <% } %>
                            
                            <% for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalReturnPages, currentPage + 2); i++) { %>
                                <a href="/admin/orders?page=<%= i %>&tab=returns" class="pagination-link <%= i === currentPage ? 'current' : '' %>"><%= i %></a>
                            <% } %>
                            
                            <% if (currentPage < totalReturnPages) { %>
                                <a href="/admin/orders?page=<%= currentPage + 1 %>&tab=returns" class="pagination-link">Next</a>
                                <a href="/admin/orders?page=<%= totalReturnPages %>&tab=returns" class="pagination-link">Last</a>
                            <% } %>
                        </div>
                    </div>
                    <% } else { %>
                        <p>No return requests found.</p>
                    <% } %>
                <% } %>
           
        </div>
            
            </div>
        
           
        </main>
    </div>

    <script>
        async function updateOrderStatus(orderId, status) {
            try {
                const response = await fetch(`/admin/orders/${orderId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status })
                });

                const data = await response.json();
                if (data.success) {
                    await Swal.fire({
                        title: 'Success!',
                        text: 'Order status updated successfully',
                        icon: 'success',
                        confirmButtonColor: '#3085d6'
                    });
                    location.reload();
                } else {
                    await Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to update status',
                        icon: 'error',
                        confirmButtonColor: '#d33'
                    });
                }
            } catch (error) {
                await Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while updating the status',
                    icon: 'error',
                    confirmButtonColor: '#d33'
                });
            }
        }

        async function cancelOrder(orderId) {
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, cancel it!'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/orders/${orderId}/cancel`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();
                    if (data.success) {
                        await Swal.fire({
                            title: 'Cancelled!',
                            text: 'Order has been cancelled successfully',
                            icon: 'success',
                            confirmButtonColor: '#3085d6'
                        });
                        location.reload();
                    } else {
                        await Swal.fire({
                            title: 'Error!',
                            text: data.message || 'Failed to cancel order',
                            icon: 'error',
                            confirmButtonColor: '#d33'
                        });
                    }
                } catch (error) {
                    await Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while cancelling the order',
                        icon: 'error',
                        confirmButtonColor: '#d33'
                    });
                }
            }
        }

        // Search functionality remains the same
        document.querySelector('.search-bar').addEventListener('input', function (e) {
            const searchTerm = e.target.value.toLowerCase();
            const orderCards = document.querySelectorAll('.order-card');

            orderCards.forEach(card => {
                const orderText = card.textContent.toLowerCase();
                card.style.display = orderText.includes(searchTerm) ? 'block' : 'none';
            });
        });

        async function approveReturnRequest(returnId) {
            try {
                const response = await fetch(`/admin/returns/${returnId}/approve`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();
                if (data.success) {
                    await Swal.fire({
                        title: 'Success!',
                        text: 'Return request approved successfully',
                        icon: 'success',
                        confirmButtonColor: '#3085d6'
                    });
                    location.reload();
                } else {
                    await Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to approve return request',
                        icon: 'error',
                        confirmButtonColor: '#d33'
                    });
                }
            } catch (error) {
                await Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while approving the return request',
                    icon: 'error',
                    confirmButtonColor: '#d33'
                });
            }
        }
        async function rejectReturnRequest(returnId) {
            try {
                const response = await fetch(`/admin/returns/${returnId}/reject`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();
                if (data.success) {
                    await Swal.fire({
                        title: 'Success!',
                        text: 'Return request rejected successfully',
                        icon: 'success',
                        confirmButtonColor: '#3085d6'
                    });
                    location.reload();
                } else {
                    await Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to reject return request',
                        icon: 'error',
                        confirmButtonColor: '#d33'
                    });
                }
            } catch (error) {
                await Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while rejecting the return request',
                    icon: 'error',
                    confirmButtonColor: '#d33'
                });
            }
        }

       
        function switchTab(tabName) {
        // Get current URL and parameters
        const url = new URL(window.location);
        
        // Update tab parameter
        url.searchParams.set('tab', tabName);
        
        // If switching tabs, reset to page 1
        if (tabName !== '<%= activeTab %>') {
            url.searchParams.set('page', 1);
        }
        
        // Redirect to the new URL
        window.location.href = url.toString();
    }

    // Keep the search functionality working with the active tab
    document.querySelector('.search-bar').addEventListener('input', function (e) {
        const searchTerm = e.target.value.toLowerCase();
        const activeTab = document.querySelector('.tab-content.active');
        const cards = activeTab.querySelectorAll('.order-card');

        cards.forEach(card => {
            const cardText = card.textContent.toLowerCase();
            card.style.display = cardText.includes(searchTerm) ? 'block' : 'none';
        });
    });
    </script>
</body>

</html>