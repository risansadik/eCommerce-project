<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            display: flex;
            min-height: 100vh;
            background-color: #1a1a1a;
            color: #ffffff;
            font-family: Arial, sans-serif;
        }

        .thumbnails-container {
            display: flex;
            overflow-x: auto;
            margin-bottom: 20px;
        }

        .thumbnail {
            margin-right: 10px;
        }

        .input-upload {
            position: relative;
        }

        .error-message {
            color: red;
            display: none;
        }

        .sidebar {
            width: 250px;
            background-color: #1a1a1a;
            padding: 20px;
        }

        .sidebar-menu {
            list-style: none;
        }

        .sidebar-menu li {
            margin-bottom: 15px;
        }

        .sidebar-menu a {
            color: #ffffff;
            text-decoration: none;
            font-size: 16px;
            opacity: 0.8;
            transition: opacity 0.3s;
        }

        .sidebar-menu a:hover {
            opacity: 1;
        }

        .main-content {
            flex: 1;
            padding: 30px;
            background-color: #1a1a1a;
        }

        .card {
            background-color: #2d2d2d;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .card-header {
            margin-bottom: 15px;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            background-color: #2d2d2d;
            border: 1px solid #404040;
            border-radius: 4px;
            color: #ffffff;
            margin-bottom: 10px;
        }

        .form-control:focus {
            outline: none;
            border-color: #4285f4;
        }

        select.form-control {
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 16px;
        }

        .image-cropper {
            display: none;
            width: 300px;
            height: 200px;
            margin-bottom: 20px;
        }

        .btn-primary {
            background-color: #4285f4;
            color: white;
            border: none;
            padding: 8px 20px;
            border-radius: 4px;
            cursor: pointer;
        }

        .btn-primary:hover {
            background-color: #3367d6;
        }

        .publish-btn {
            background-color: #24b47e;
            color: white;
            border: none;
            padding: 12px 0;
            width: 100%;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 20px;
        }

        .publish-btn:hover {
            background-color: #1f9d6d;
        }

        .thumbnails-container {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 20px;
        }

        .thumbnail {
            position: relative;
            width: 150px;
        }

        .thumbnail img {
            width: 100%;
            height: auto;
            border-radius: 4px;
        }

        .thumbnail button {
            position: absolute;
            top: 5px;
            right: 5px;
        }

        .image-container {
            position: relative;
            display: inline-block;
            margin: 10px;
        }

        .delete-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            transition: background-color 0.3s ease;
        }

        .delete-btn:hover {
            background-color: rgba(255, 0, 0, 0.9);
        }

        .product-thumbnail {
            max-width: 150px;
            height: auto;
            border-radius: 4px;
        }

        .size-variants-container {
            background-color: #2d2d2d;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
        }

        .size-variant {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            align-items: center;
        }

        .size-variant input {
            flex: 1;
        }

        .remove-variant {
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 12px;
            cursor: pointer;
        }

        .add-variant {
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 12px;
            cursor: pointer;
            margin-top: 10px;
        }
    </style>
</head>

<body>
    <nav class="sidebar">
        <ul class="sidebar-menu">
            <li><a href="/admin/">Dashboard</a></li>
            <li><a href="/admin/users">Customers</a></li>
            <li><a href="/admin/category">Category</a></li>

            <li><a href="/admin/addProducts">Add product</a></li>
            <li><a href="/admin/products">Products</a></li>
            <li><a href="/admin/coupons">Coupon</a></li>
            <li><a href="#">Banner</a></li>
            <li><a href="/admin/orders">Orders</a></li>
            <li><a href="/admin/logout">Logout</a></li>
        </ul>
    </nav>
    <main class="main-content">
        <div class="content-header">
            <h2 class="content-title">Edit Product</h2>
        </div>

        <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data"
            onsubmit="return false">
            <div class="card">
                <div class="mb-4">
                    <label for="product_name" class="form-label text-white">Product Name</label>
                    <input type="text" name="productName" value="<%=product.productName%>" class="form-control"
                        id="product_name">
                    <div id="productName-error" class="error-message"></div>
                </div>

                <div class="mb-4">
                    <label class="form-label text-white">Full description</label>
                    <input name="descriptionData" value="<%=product.description%>" class="form-control" rows="4">
                    <div id="description-error" class="error-message"></div>
                </div>

                <div class="row">
                    <div class="col-lg-6">
                        <div class="mb-4">
                            <label class="form-label text-white">Regular price</label>
                            <input placeholder="$" name="regularPrice" type="text" value="<%=product.regularPrice%>"
                                class="form-control">
                            <div id="regularPrice-error" class="error-message"></div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="mb-4">
                            <label class="form-label text-white">Sale price</label>
                            <input name="salePrice" type="text" value="<%=product.salePrice%>" class="form-control">
                            <div id="salePrice-error" class="error-message"></div>
                        </div>
                    </div>
                </div>

                <!-- New Size Variants Section -->
                <div class="size-variants-container">
                    <label class="form-label text-white">Size Variants</label>
                    <div id="sizeVariants">
                        <% if (product.sizeVariants && product.sizeVariants.length> 0) { %>
                            <% product.sizeVariants.forEach((variant, index)=> { %>
                                <div class="size-variant">
                                    <input type="text" name="sizes" class="form-control"
                                        placeholder="Size (e.g. S, M, L)" value="<%= variant.size %>" required>
                                    <input type="number" name="quantities" class="form-control" placeholder="Quantity"
                                        value="<%= variant.quantity %>" min="0" required>
                                    <button type="button" class="remove-variant"
                                        onclick="removeVariant(this)">Remove</button>
                                </div>
                                <% }) %>
                                    <% } else { %>
                                        <div class="size-variant">
                                            <input type="text" name="sizes" class="form-control"
                                                placeholder="Size (e.g. S, M, L)" required>
                                            <input type="number" name="quantities" class="form-control"
                                                placeholder="Quantity" min="0" required>
                                            <button type="button" class="remove-variant"
                                                onclick="removeVariant(this)">Remove</button>
                                        </div>
                                        <% } %>
                    </div>
                    <button type="button" class="add-variant" onclick="addVariant()">Add Size Variant</button>
                    <div id="sizeVariants-error" class="error-message"></div>
                </div>

                <div class="mb-4">
                    <label class="form-label text-white">Category</label>
                    <select class="form-control" name="category">

                        <%for(let i=0; i < cat.length; i++) {%>
                            <option value="<%=cat[i].name%>" <%=product.category.toString()===cat[i]._id.toString()
                                ? 'selected' : '' %>>
                                <%=cat[i].name%>
                            </option>
                            <%}%>
                    </select>
                    <div id="category-error" class="error-message"></div>
                </div>

                <div class="card">
                    <div class="card-header text-white">
                        <h4>Product Images</h4>
                    </div>

                    <div class="thumbnails-container">
                        <% for(let i=0; i<product.productImage.length; i++) { %>
                            <div class="image-container" id="image-container-<%= product.productImage[i] %>">
                                <img src="/uploads/product-images/<%= product.productImage[i] %>" alt="Product Image"
                                    class="product-thumbnail">
                                <button type="button" class="delete-btn"
                                    onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>')">
                                    ×
                                </button>
                            </div>
                            <% } %>
                    </div>
                    <div class="card-body">
                        <div class="image-upload-container">
                            <div class="mb-4">
                                <img src="" alt="" id="imgView1">
                                <input class="form-control" type="file" name="images" id="input1"
                                    accept="image/png, image/jpeg, image/jpg"
                                    onchange="viewImage1(event), viewImage(event, 1)">
                            </div>
                            <div class="image-cropper">
                                <img src="" id="croppedImg1" alt="">
                                <button type="button" id="saveButton1" class="btn-primary">Save</button>
                            </div>
                        </div>

                        <div class="image-upload-container">
                            <div class="mb-4">
                                <img src="" alt="" id="imgView2">
                                <input class="form-control" type="file" name="images" id="input2"
                                    accept="image/png, image/jpeg, image/jpg"
                                    onchange="viewImage2(event), viewImage(event, 2)">
                            </div>
                            <div class="image-cropper">
                                <img src="" id="croppedImg2" alt="">
                                <button type="button" id="saveButton2" class="btn-primary">Save</button>
                            </div>
                        </div>

                        <div class="image-upload-container">
                            <div class="mb-4">
                                <img src="" alt="" id="imgView3">
                                <input class="form-control" type="file" name="images" id="input3"
                                    accept="image/png, image/jpeg, image/jpg"
                                    onchange="viewImage3(event), viewImage(event, 3)">
                            </div>
                            <div class="image-cropper">
                                <img src="" id="croppedImg3" alt="">
                                <button type="button" id="saveButton3" class="btn-primary">Save</button>
                            </div>
                        </div>

                        <div class="image-upload-container">
                            <div class="mb-4">
                                <img src="" alt="" id="imgView4">
                                <input class="form-control" type="file" name="images" id="input4"
                                    accept="image/png, image/jpeg, image/jpg"
                                    onchange="viewImage4(event), viewImage(event, 4)">
                            </div>
                            <div class="image-cropper">
                                <img src="" id="croppedImg4" alt="">
                                <button type="button" id="saveButton4" class="btn-primary">Save</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="displayLocation" class="text-white">Display Location</label>
                    <select name="displayLocation" id="displayLocation" class="form-control" required>
                        <option value="shop">Shop Only</option>
                        <option value="home">Home Only</option>
                        <option value="both">Both Home and Shop</option>
                    </select>
                </div>

                <button class="publish-btn" id="updatebtn" type="button" onclick="validateAndSubmit()">Update</button>
        </form>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
        integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
        crossorigin="anonymous"></script>


    <script>

        function showErrorPopup(message) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: message || 'Something went wrong. Please try again.',
                confirmButtonText: 'OK'
            });
        }

        function addVariant() {
            const container = document.getElementById('sizeVariants');
            const variantDiv = document.createElement('div');
            variantDiv.className = 'size-variant';
            variantDiv.innerHTML = `
                <input type="text" name="sizes" class="form-control" placeholder="Size (e.g. S, M, L)" required>
                <input type="number" name="quantities" class="form-control" placeholder="Quantity" min="0" required>
                <button type="button" class="remove-variant" onclick="removeVariant(this)">Remove</button>
            `;
            container.appendChild(variantDiv);
        }

        function removeVariant(button) {
            const variantDiv = button.parentElement;
            const container = variantDiv.parentElement;
            if (container.children.length > 1) {
                variantDiv.remove();
            } else {
                displayErrorMessage('sizeVariants-error', 'At least one size variant is required');
            }
        }


        function validateAndSubmit() {
            if (!validateForm()) {
                showErrorPopup('Please check all required fields');
                return;
            }

            const form = document.querySelector('form');
            const formData = new FormData(form);

            // Get all size inputs and quantity inputs
            const sizeInputs = document.querySelectorAll('input[name="sizes"]');
            const quantityInputs = document.querySelectorAll('input[name="quantities"]');

            // Remove any existing size and quantity data
            formData.delete('sizes');
            formData.delete('quantities');

            // Add each size and quantity to formData
            sizeInputs.forEach((input, index) => {
                if (input.value.trim()) {
                    formData.append('sizes[]', input.value.trim());
                    formData.append('quantities[]', quantityInputs[index].value || '0');
                }
            });

            // Show loading state
            Swal.fire({
                title: 'Updating product...',
                text: 'Please wait...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            fetch(form.action, {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: data.message || 'Product updated successfully',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/admin/products';
                            }
                        });
                    } else {
                        throw new Error(data?.message || 'Failed to update product');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to update product. Please try again.',
                        confirmButtonText: 'OK'
                    });
                });
        }

        function validateForm() {
            clearErrorMessages();
            let isValid = true;

            const requiredFields = {
                'productName': 'Product name is required',
                'descriptionData': 'Description is required',
                'regularPrice': 'Regular price is required',
                'salePrice': 'Sale price is required'
            };

            // Check all required fields
            for (let [fieldName, errorMessage] of Object.entries(requiredFields)) {
                const field = document.getElementsByName(fieldName)[0];
                if (!field || !field.value.trim()) {
                    displayErrorMessage(`${fieldName}-error`, errorMessage);
                    isValid = false;
                }
            }

            // Validate prices
            const regularPrice = parseFloat(document.getElementsByName('regularPrice')[0].value);
            const salePrice = parseFloat(document.getElementsByName('salePrice')[0].value);

            if (isNaN(regularPrice) || regularPrice <= 0) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid regular price');
                isValid = false;
            }

            if (isNaN(salePrice) || salePrice <= 0) {
                displayErrorMessage('salePrice-error', 'Please enter a valid sale price');
                isValid = false;
            }

            if (salePrice >= regularPrice) {
                displayErrorMessage('salePrice-error', 'Sale price must be less than regular price');
                isValid = false;
            }

            // Validate size variants
            const sizes = document.querySelectorAll('input[name="sizes"]');
            const quantities = document.querySelectorAll('input[name="quantities"]');

            if (sizes.length === 0) {
                displayErrorMessage('sizeVariants-error', 'At least one size variant is required');
                isValid = false;
            }

            let hasValidVariant = false;
            let totalQuantity = 0;

            sizes.forEach((size, index) => {
                if (size.value.trim()) {
                    hasValidVariant = true;
                    const quantity = parseInt(quantities[index].value) || 0;
                    totalQuantity += quantity;
                }
            });

            if (!hasValidVariant) {
                displayErrorMessage('sizeVariants-error', 'Please add at least one size variant');
                isValid = false;
            }

            if (totalQuantity === 0) {
                displayErrorMessage('sizeVariants-error', 'Total quantity across all variants must be greater than 0');
                isValid = false;
            }

            return isValid;
        }


        function displayErrorMessage(elementId, message) {
            var errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }


        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName('error-message');
            Array.from(errorElements).forEach(element => {
                element.innerText = '';
            });
            const errorMessage = document.getElementById('errorMessage');


        }




        function viewImage1(event) {
            document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
        }


        function viewImage2(event) {
            document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
        }


        function viewImage3(event) {
            document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
        }


        function viewImage4(event) {
            document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])
        }




        function viewImage(event, index) {
            let input = event.target;
            let reader = new FileReader();
            let cropper = null;

            reader.onload = function () {
                let dataURL = reader.result;
                let imageContainer = document.getElementById('imgView' + index).parentElement;
                let image = document.getElementById('imgView' + index);
                let croppedImage = document.getElementById('croppedImg' + index);
                let cropperContainer = croppedImage.parentNode;

                // Clear any existing cropper
                if (cropper) {
                    cropper.destroy();
                }

                // Add delete button if it doesn't exist
                if (!imageContainer.querySelector('.delete-image-btn')) {
                    const deleteBtn = document.createElement('button');
                    deleteBtn.type = 'button';
                    deleteBtn.className = 'delete-image-btn';
                    deleteBtn.innerHTML = '×';
                    deleteBtn.style.cssText = `
                position: absolute;
                top: 5px;
                right: 5px;
                background-color: rgba(255, 0, 0, 0.7);
                color: white;
                border: none;
                border-radius: 50%;
                width: 25px;
                height: 25px;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 18px;
                z-index: 1000;
            `;

                    // Add hover effect
                    deleteBtn.onmouseover = function () {
                        this.style.backgroundColor = 'rgba(255, 0, 0, 0.9)';
                    };
                    deleteBtn.onmouseout = function () {
                        this.style.backgroundColor = 'rgba(255, 0, 0, 0.7)';
                    };

                    // Add delete functionality
                    deleteBtn.onclick = function () {
                        Swal.fire({
                            title: 'Delete Image?',
                            text: 'Are you sure you want to remove this image?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#3085d6',
                            confirmButtonText: 'Yes, delete it!'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // Clear the input file
                                input.value = '';
                                // Clear the image preview
                                image.src = '';
                                // Hide the delete button
                                deleteBtn.style.display = 'none';
                                // Destroy cropper if exists
                                if (cropper) {
                                    cropper.destroy();
                                }
                                // Hide cropper container
                                cropperContainer.style.display = 'none';

                                Swal.fire(
                                    'Deleted!',
                                    'The image has been removed.',
                                    'success'
                                );
                            }
                        });
                    };

                    imageContainer.style.position = 'relative';
                    imageContainer.appendChild(deleteBtn);
                }

                // Set initial image
                image.src = dataURL;

                // Show delete button
                let deleteBtn = imageContainer.querySelector('.delete-image-btn');
                if (deleteBtn) {
                    deleteBtn.style.display = 'flex';
                }

                // Initialize cropper
                cropper = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true
                });

                // Show cropper container
                cropperContainer.style.display = 'block';

                // Handle save button click
                let saveButton = document.querySelector('#saveButton' + index);
                saveButton.onclick = async function () {
                    try {
                        // Get cropped canvas
                        let croppedCanvas = cropper.getCroppedCanvas();

                        // Update the original image with cropped version
                        image.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

                        // Generate filename with timestamp
                        let timestamp = new Date().getTime();
                        let fileName = `cropped-img-${timestamp}-${index}.png`;

                        // Convert canvas to blob and update input file
                        await croppedCanvas.toBlob(blob => {
                            let input = document.getElementById('input' + index);
                            let imgFile = new File([blob], fileName, { type: 'image/png' });
                            const fileList = new DataTransfer();
                            fileList.items.add(imgFile);
                            input.files = fileList.files;
                        }, 'image/png');

                        // Destroy cropper and hide container
                        cropper.destroy();
                        cropperContainer.style.display = 'none';

                        // Show success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Image Cropped',
                            text: 'The image has been cropped successfully',
                            timer: 1500,
                            showConfirmButton: false
                        });

                    } catch (error) {
                        console.error('Error during image cropping:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to crop image. Please try again.'
                        });
                    }
                };
            };

            reader.readAsDataURL(input.files[0]);
        }
        const selectedImages = [];
        document.getElementById("imageInput").addEventListener("change", handleFileSelect);


        function handleFileSelect(event) {
            const addedImagesContainer = document.getElementById("addedImagesContainer");
            addedImagesContainer.innerHTML = "";
            const files = event.target.files;
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                selectedImages.push(file);
                const thumbnail = document.createElement("div");
                thumbnail.classList.add("thumbnail");
                const img = document.createElement("img");
                img.src = URL.createObjectURL(file);
                img.alt = "thumbnail";
                img.style.width = "50px";
                img.style.height = "auto";
                const removeIcon = document.createElement("span");
                removeIcon.classList.add("remove-icon");
                removeIcon.innerHTML = "&times;";
                removeIcon.addEventListener("click", function () {
                    const index = selectedImages.indexOf(file);
                    if (index !== -1) {
                        selectedImages.splice(index, 1);
                    }
                    thumbnail.remove();
                });
                thumbnail.appendChild(img);
                thumbnail.appendChild(removeIcon);
                addedImagesContainer.appendChild(thumbnail);
            }
        };

        function deleteSingleImage(imageId, productId) {
            Swal.fire({
                title: 'Delete Image',
                text: 'Are you sure you want to delete this image?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading state
                    Swal.fire({
                        title: 'Deleting...',
                        text: 'Please wait...',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Send delete request
                    fetch('/admin/deleteImage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            imageNameToServer: imageId,
                            productIdToServer: productId
                        })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.status === true) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success',
                                    text: 'Image deleted successfully',
                                    timer: 1500,
                                    showConfirmButton: false
                                }).then(() => {
                                    // Reload the page after successful deletion
                                    window.location.reload();
                                });
                            } else {
                                throw new Error(data.message || 'Failed to delete image');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: error.message || 'Failed to delete image. Please try again.'
                            });
                        });
                }
            });
        }


    </script>


</body>

</html>