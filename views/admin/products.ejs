<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <style>
        /* Previous CSS remains the same */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #1a1d21;
            color: #ffffff;
        }

        .container {
            display: flex;
            min-height: 100vh;
        }

        .sidebar {
            width: 250px;
            background-color: #1a1d21;
            padding: 20px 0;
            border-right: 1px solid #2d3339;
        }

        .main-content {
            flex: 1;
            padding: 30px;
        }

        .logo {
            font-size: 1.2rem;
            padding: 0 20px;
            margin-bottom: 30px;
            color: #ffffff;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: #8b949e;
            text-decoration: none;
            transition: background-color 0.2s;
        }

        .nav-item:hover {
            background-color: #2d3339;
        }

        .nav-item.active {
            background-color: #2d3339;
            color: #ffffff;
        }

        .page-title {
            font-size: 1.5rem;
            margin-bottom: 25px;
        }

        .search-container {
            margin-bottom: 25px;
        }

        .search-form {
            display: flex;
            justify-content: center;
        }

        .search-box {
            width: 500px;
            padding: 12px 20px;
            border-radius: 25px;
            border: 1px solid #2d3339;
            background-color: #2d3339;
            color: #ffffff;
            font-size: 0.9rem;
        }

        .search-box:focus {
            outline: none;
            border-color: #0095ff;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th {
            text-align: left;
            padding: 15px 20px;
            background-color: #2d3339;
            font-weight: normal;
            color: #8b949e;
        }

        .table td {
            padding: 15px 20px;
            border-bottom: 1px solid #2d3339;
            vertical-align: top;
        }

        .button {
            padding: 8px 16px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
            text-decoration: none;
            display: inline-block;
            transition: opacity 0.2s;
        }

        .button:hover {
            opacity: 0.9;
        }

        .button-primary {
            background-color: #0095ff;
            color: white;
            width: 100px;
        }

        .button-danger {
            background-color: #dc3545;
            color: white;
            width: 80px;
        }

        .button-success {
            background-color: #28a745;
            color: white;
            width: 80px;
        }

        .pagination-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 20px 0;
            gap: 10px;
        }

        .pagination-container a,
        .pagination-container span {
            padding: 8px 16px;
            border: 1px solid #2d3339;
            background-color: #2d3339;
            color: #ffffff;
            text-decoration: none;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .pagination-container a:hover {
            background-color: #0095ff;
            border-color: #0095ff;
        }

        .pagination-container .current-page {
            background-color: #0095ff;
            border-color: #0095ff;
            color: white;
        }

        /* Size variants styling */
        .variants-container {
            max-height: 150px;
            overflow-y: auto;
            padding: 4px;
        }

        .variant-item {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 6px;
            padding: 4px 8px;
            background-color: #2d3339;
            border-radius: 4px;
        }

        .size-badge {
            background-color: #0095ff;
            color: white;
            padding: 2px 8px;
            border-radius: 3px;
            font-size: 0.85rem;
            min-width: 35px;
            text-align: center;
        }

        .quantity-text {
            color: #8b949e;
            font-size: 0.85rem;
        }

        .no-variants {
            color: #8b949e;
            font-style: italic;
        }

        /* Status badge styling */
        .status-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .status-available {
            background-color: #28a745;
            color: white;
        }

        .status-out-of-stock {
            background-color: #dc3545;
            color: white;
        }

        .status-discontinued {
            background-color: #6c757d;
            color: white;
        }
    </style>
</head>

<body>
    <div class="container">
        <!-- Sidebar remains the same -->
        <div class="sidebar">
            <a href="/admin/" class="nav-item"><span class="nav-icon"></span>Dashboard</a>
            <a href="/admin/users" class="nav-item"><span class="nav-icon"></span>Customers</a>
            <a href="/admin/category" class="nav-item"><span class="nav-icon"></span>Category</a>
            <a href="/admin/addProducts" class="nav-item"><span class="nav-icon"></span>Add product</a>
            <a href="/admin/products" class="nav-item active"><span class="nav-icon"></span>Products</a>
            <a href="#" class="nav-item"><span class="nav-icon"></span>Coupon</a>
            <a href="#" class="nav-item"><span class="nav-icon"></span>Banner</a>
            <a href="#" class="nav-item"><span class="nav-icon"></span>Orders</a>
        </div>

        <div class="main-content">
            <h1 class="page-title">Products</h1>

            <!-- Updated search form with functionality -->
            <div class="search-container">
                <form action="/admin/products" method="get" class="search-form">
                    <input type="text" class="search-box" placeholder="Search products" name="search"
                        value="<%= locals.search || '' %>">
                </form>
            </div>

            <table class="table">
                <thead>
                    <tr>
                        <th>Product name</th>
                        <th>Category</th>
                        <th>Sale Price</th>
                        <th>Offer Price</th>
                        <th>Offer</th>
                        <th>Size Variants</th>
                        <th>Stock Status</th>
                        <th>Action</th>
                        <th>Edit</th>
                    </tr>
                </thead>
                <tbody>

                    <%for(let i=data.length-1;i>=0;i--){%>
                        <tr>
                            <td>
                                <%=data[i].productName%>
                            </td>
                            <td>
                                <%=data[i].category.name%>
                            </td>
                            <td>â‚¹<%=data[i].salePrice%>
                            </td>
                            <td>
                                <%if(locals.data[i].productOffer){%>
                                    <%=data[i].productOffer%>%
                                        <%}else{%>
                                            0%
                                            <%}%>
                            </td>
                            <td>

                                <%if(locals.data[i].productOffer===0){%>
                                    <button class="button button-primary" onclick="addOffer('<%=data[i]._id%>')">Add
                                        Offer</button>

                                    <%}else{%>
                                        <button class="button button-primary"
                                            onclick="removeOffer('<%=data[i]._id%>')">Remove</button>

                                        <%}%>
                            </td>

                            <td>
                                <div class="variants-container">
                                    <% if(data[i].sizeVariants && data[i].sizeVariants.length> 0) { %>
                                        <% data[i].sizeVariants.forEach(variant=> { %>
                                            <div class="variant-item">
                                                <span class="size-badge">
                                                    <%=variant.size%>
                                                </span>
                                                <span class="quantity-text">
                                                    <%=variant.quantity%> pcs
                                                </span>
                                            </div>
                                            <% }) %>
                                                <% } else { %>
                                                    <span class="no-variants">No variants</span>
                                                    <% } %>
                                </div>
                            </td>
                            <td>
                                <span class="status-badge status-<%=data[i].status.toLowerCase().replace(' ', '-')%>">
                                    <%=data[i].status%>
                                </span>
                            </td>
                            <td>

                                <%if(data[i].isBlocked===false){%>
                                    <button class="button button-danger">
                                        <a href="/admin/blockProduct?id=<%=data[i]._id%>"
                                            style="text-decoration: none; color: white;">Block</a>
                                    </button>

                                    <%}else{%>
                                        <button class="button button-success">
                                            <a href="/admin/unblockProduct?id=<%=data[i]._id%>"
                                                style="text-decoration: none; color: white;">Unblock</a>
                                        </button>

                                        <%}%>
                            </td>
                            <td>
                                <button class="button button-primary"> <a
                                        href="/admin/editProduct?id=<%=data[i]._id%>">Edit</a></button>
                            </td>
                        </tr>
                        <%}%>
                </tbody>
            </table>
        </div>
    </div>

    <div class="pagination-container">
        <% if (currentPage > 1) { %>
            <a href="/admin/products?page=<%= currentPage - 1 %><%= search ? `&search=${search}` : '' %>" class="pagination-link">&laquo; Previous</a>
        <% } %>
    
        <% 
        // Calculate range of pages to show
        const startPage = Math.max(1, currentPage - 2);
        const endPage = Math.min(totalPages, currentPage + 2);
        
        // Show first page if not in range
        if (startPage > 1) { %>
            <a href="/admin/products?page=1<%= search ? `&search=${search}` : '' %>" class="pagination-link">1</a>
            <% if (startPage > 2) { %>
                <span class="pagination-ellipsis">...</span>
            <% } %>
        <% } %>
    
        <% // Show page numbers
        for (let i = startPage; i <= endPage; i++) { %>
            <% if (i === currentPage) { %>
                <span class="current-page"><%= i %></span>
            <% } else { %>
                <a href="/admin/products?page=<%= i %><%= search ? `&search=${search}` : '' %>" class="pagination-link"><%= i %></a>
            <% } %>
        <% } %>
    
        <% // Show last page if not in range
        if (endPage < totalPages) { %>
            <% if (endPage < totalPages - 1) { %>
                <span class="pagination-ellipsis">...</span>
            <% } %>
            <a href="/admin/products?page=<%= totalPages %><%= search ? `&search=${search}` : '' %>" class="pagination-link"><%= totalPages %></a>
        <% } %>
    
        <% if (currentPage < totalPages) { %>
            <a href="/admin/products?page=<%= currentPage + 1 %><%= search ? `&search=${search}` : '' %>" class="pagination-link">Next &raquo;</a>
        <% } %>
    </div>


    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    <script>

        // Frontend JavaScript fixes
        async function addOffer(productId) {
            try {
                const { value: percentage } = await Swal.fire({
                    title: 'Add Product Offer',
                    input: 'number',
                    inputLabel: 'Offer Percentage',
                    inputPlaceholder: "Enter percentage (0-100)",
                    inputAttributes: {
                        min: 0,
                        max: 100,
                        step: 1
                    },
                    validationMessage: 'Please enter a valid percentage between 0 and 100',
                    showCancelButton: true,
                    confirmButtonText: 'Add Offer',
                    showLoaderOnConfirm: true,
                    preConfirm: (value) => {
                        if (!value || value < 0 || value > 100) {
                            Swal.showValidationMessage('Please enter a valid percentage between 0 and 100');
                        }
                        return value;
                    }
                });

                if (!percentage) return; // User cancelled

                const response = await fetch("/admin/addProductOffer", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        percentage,
                        productId
                    })
                });

                const data = await response.json();

                if (data.status) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message || 'Offer added successfully',
                        timer: 2000
                    });
                    location.reload();
                } else {
                    throw new Error(data.message || 'Failed to add offer');
                }
            } catch (error) {
                console.error('Error in addOffer:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while adding the offer'
                });
            }
        }

        async function removeOffer(productId) {
            try {
                const result = await Swal.fire({
                    title: 'Remove Offer',
                    text: "Are you sure you want to remove this offer?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, remove it',
                    showLoaderOnConfirm: true
                });

                if (!result.isConfirmed) return;

                const response = await fetch('/admin/removeProductOffer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId })
                });

                const data = await response.json();

                if (data.status) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message || 'Offer removed successfully',
                        timer: 2000
                    });
                    location.reload();
                } else {
                    throw new Error(data.message || 'Failed to remove offer');
                }
            } catch (error) {
                console.error('Error in removeOffer:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while removing the offer'
                });
            }
        }

        async function deleteProduct(productId) {
            try {
                const result = await Swal.fire({
                    title: 'Delete Product',
                    text: "Are you sure you want to delete this product? This action cannot be undone.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it',
                    showLoaderOnConfirm: true
                });

                if (!result.isConfirmed) return;

                const response = await fetch('/admin/deleteProduct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId })
                });

                const data = await response.json();

                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: data.message,
                        timer: 2000
                    });
                    location.reload();
                } else {
                    throw new Error(data.message || 'Failed to delete product');
                }
            } catch (error) {
                console.error('Error in deleteProduct:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while deleting the product'
                });
            }
        }



    </script>


</body>

</html>