<!DOCTYPE html>
<html>

<head>


    <style id="mainStyles">
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #0f1115;
            color: white;
            display: flex;
            min-height: 100vh;
        }

        ::-webkit-scrollbar {
            display: none;
        }

        .sidebar {
            width: 250px;
            background-color: #1a1d21;
            padding: 20px;
        }

        .sidebar-item {
            padding: 12px;
            color: #a0aec0;
            text-decoration: none;
            display: block;
            margin-bottom: 5px;
            border-radius: 4px;
        }

        .sidebar-item:hover {
            background-color: #2d3748;
        }

        .main-content {
            flex: 1;
            padding: 30px;
        }

        .report-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .report-title {
            font-size: 24px;
            color: white;
        }

        .export-buttons {
            display: flex;
            gap: 10px;
        }

        .export-btn {
            background-color: #2d3748;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background-color: #1a1d21;
            padding: 20px;
            border-radius: 8px;
        }

        .stat-title {
            color: #a0aec0;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .stat-value {
            font-size: 24px;
            font-weight: bold;
        }

        .filters-section {
            background-color: #1a1d21;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }

        .filters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .filter-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            color: #a0aec0;
            margin-bottom: 8px;
        }

        select,
        input {
            width: 100%;
            padding: 10px;
            background-color: #2d3748;
            border: 1px solid #4a5568;
            border-radius: 4px;
            color: white;
        }

        .apply-btn {
            background-color: #0284c7;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 15px;
        }

        .sales-table {
            background-color: #1a1d21;
            border-radius: 8px;
            overflow: hidden;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th,
        td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #2d3748;
        }

        th {
            background-color: #2d3748;
            color: #a0aec0;
        }

        tr:hover {
            background-color: #2d3748;
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
        }

        .status-completed {
            background-color: #065f46;
            color: #34d399;
        }

        .status-pending {
            background-color: #92400e;
            color: #fbbf24;
        }

        .export-btn {
            background-color: #2d3748;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .export-btn:hover {
            background-color: #4a5568;
        }

        .chart-btn {
            background-color: #2d3748;
            color: #a0aec0;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .chart-btn:hover {
            background-color: #4a5568;
            color: white;
        }

        .chart-btn.active {
            background-color: #0284c7;
            color: white;
        }

        .chart-wrapper {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .chart-wrapper:hover {
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
        }

        .text-right {
            text-align: right;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 10px;
            border-bottom: 1px solid #2d3748;
        }

        .table-container {
            margin-top: 15px;
        }

        .table-container table {
            width: 100%;
            border-collapse: collapse;
        }

        .table-container th,
        .table-container td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #2d3748;
        }

        .table-container th {
            background-color: #1a1d21;
            color: #a0aec0;
            font-weight: 500;
        }

        .table-container tr:hover {
            background-color: #2d3748;
        }

        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
            gap: 10px;
        }

        .pagination-btn {
            background-color: #2d3748;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }

        .pagination-btn:disabled {
            background-color: #1a1d21;
            cursor: not-allowed;
            opacity: 0.5;
        }

        .pagination-btn:hover:not(:disabled) {
            background-color: #4a5568;
        }

        .pagination-info {
            color: #a0aec0;
            margin: 0 15px;
        }
    </style>

    <style id="pdfStyles">
       .pdf-content {
    display: none;
    background: white;
    color: black;
    font-family: Arial, sans-serif;
    padding: 15px;
    max-width: 1100px; /* Force wider content area */
    margin: 0 auto;
    font-size: 9px; /* Smaller font size for better fitting */
}
        .pdf-content .header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #333;
            padding-bottom: 20px;
        }

        .pdf-content .header h1 {
            color: #333;
            font-size: 24px;
            margin-bottom: 10px;
        }

        .pdf-content .header .date {
            color: #666;
            font-size: 14px;
        }

        .pdf-content .summary {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .pdf-content .summary-item {
            background: #f8f8f8;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
        }

        .pdf-content .summary-item .label {
            color: #666;
            font-size: 14px;
            margin-bottom: 5px;
        }

        .pdf-content .summary-item .value {
            color: #333;
            font-size: 20px;
            font-weight: bold;
        }

        .pdf-content table {
    width: 100%;
    border-collapse: collapse;
    table-layout: fixed; 
    font-size: 8px;
}

        .pdf-content th,
        .pdf-content td {
            padding: 12px 8px;
            border: 1px solid #ddd;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            font-size: 12px;
        }

        .pdf-content th {
            background: #f4f4f4;
            color: #333;
            font-weight: bold;
            text-align: left;
        }

        .pdf-content th:nth-child(1),
.pdf-content td:nth-child(1) {
    width: 10%; 
}


.pdf-content th:nth-child(2),
.pdf-content td:nth-child(2) {
    width: 8%;
}

.pdf-content th:nth-child(3),
.pdf-content td:nth-child(3) {
    width: 15%; 
}

.pdf-content th:nth-child(4),
.pdf-content td:nth-child(4),
.pdf-content th:nth-child(5),
.pdf-content td:nth-child(5),
.pdf-content th:nth-child(6),
.pdf-content td:nth-child(6),
.pdf-content th:nth-child(7),
.pdf-content td:nth-child(7) {
    width: 12%; 
    text-align: right;
}

.pdf-content th:nth-child(8),
.pdf-content td:nth-child(8) {
    width: 7%;
    text-align: center;
}


.pdf-content td, .pdf-content th {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    padding: 5px 2px;
}

        .pdf-content .status {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 500;
            min-width: 80px;
            text-align: center;
        }

        .pdf-content .status-completed {
            background: #e6f4ea;
            color: #1e7e34;
        }

        .pdf-content .status-pending {
            background: #fff3e0;
            color: #e65100;
        }


        .pdf-content .amount {
            font-family: 'Courier New', monospace;
            white-space: nowrap;
        }

        .pdf-analytics {
            margin-top: 30px;
            page-break-before: always;
        }

        .pdf-section {
            margin-bottom: 30px;
        }

        .pdf-section h2 {
            color: #333;
            font-size: 18px;
            margin-bottom: 15px;
            padding-bottom: 5px;
            border-bottom: 2px solid #eee;
        }
    </style>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
    <div class="sidebar">
        <a href="/admin/sales-report" class="sidebar-item">Dashboard</a>
        <a href="/admin/users" class="sidebar-item">Customers</a>
        <a href="/admin/category" class="sidebar-item">Category</a>
        <a href="/admin/addProducts" class="sidebar-item">Add product</a>
        <a href="/admin/products" class="sidebar-item">Product</a>
        <a href="/admin/coupons" class="sidebar-item">Coupon</a>
        <a href="#" class="sidebar-item">Banner</a>
        <a href="/admin/orders" class="sidebar-item">Orders</a>
        <a href="/admin/logout" class="sidebar-item">Logout</a>
    </div>


    <div class="main-content">
        <div class="export-buttons">
            <button class="export-btn" onclick="downloadPDF()">
                Download PDF
            </button>
            <button class="export-btn" onclick="downloadExcel()">
                Download Excel
            </button>
        </div>
        <div class="stat-card">
            <div class="stat-title">Overall Sales Count</div>
            <div class="stat-value">

                <%= stats && stats.salesCount !==undefined ? stats.salesCount : 0 %>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-title">Overall Order Amount</div>
            <div class="stat-value">
                ₹<%= stats && stats.orderAmount !==undefined ? stats.orderAmount.toLocaleString() : '0' %>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-title">Overall Discount</div>
            <div class="stat-value">
                ₹<%= stats && stats.discount !==undefined ? stats.discount.toLocaleString() : '0' %>
            </div>
        </div>

        <div class="charts-section" style="margin: 30px 0;">
            <div class="stat-card">
                <div class="chart-controls" style="margin-bottom: 20px; display: flex; gap: 10px;">
                    <button class="export-btn" onclick="changePeriod('daily')" id="dailyBtn">Daily</button>
                    <button class="export-btn" onclick="changePeriod('weekly')" id="weeklyBtn">Weekly</button>
                    <button class="export-btn" onclick="changePeriod('monthly')" id="monthlyBtn">Monthly</button>
                    <button class="export-btn" onclick="changePeriod('yearly')" id="yearlyBtn">Yearly</button>
                </div>
                <div style="height: 400px; width: 100%;">
                    <canvas id="salesChart"></canvas>
                </div>
            </div>
        </div>


        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <!-- Top Products Card -->
            <div class="stat-card">
                <div class="card-header" style="margin-bottom: 15px;">
                    <h2 class="stat-title" style="font-size: 18px;">Top 10 Products</h2>
                </div>
                <div class="table-container" style="max-height: 400px; overflow-y: auto;">
                    <table>
                        <thead>
                            <tr>
                                <th>Product Name</th>
                                <th class="text-right">Quantity</th>
                                <th class="text-right">Revenue</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% topProducts.forEach(product=> { %>
                                <tr>
                                    <td>
                                        <%= product.productName %>
                                    </td>
                                    <td class="text-right">
                                        <%= product.totalQuantity %>
                                    </td>
                                    <td class="text-right">₹<%= product.totalRevenue.toLocaleString() %>
                                    </td>
                                </tr>
                                <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Top Categories Card -->
            <div class="stat-card">
                <div class="card-header" style="margin-bottom: 15px;">
                    <h2 class="stat-title" style="font-size: 18px;">Top 10 Categories</h2>
                </div>
                <div class="table-container" style="max-height: 400px; overflow-y: auto;">
                    <table>
                        <thead>
                            <tr>
                                <th>Category Name</th>
                                <th class="text-right">Quantity</th>
                                <th class="text-right">Revenue</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% topCategories.forEach(category=> { %>
                                <tr>
                                    <td>
                                        <%= category.categoryName %>
                                    </td>
                                    <td class="text-right">
                                        <%= category.totalQuantity %>
                                    </td>
                                    <td class="text-right">₹<%= category.totalRevenue.toLocaleString() %>
                                    </td>
                                </tr>
                                <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="filters-section">
            <div class="filters-grid">
                <div class="filter-group">
                    <label>Date Range</label>
                    <select id="dateRange">
                        <option value="custom">Custom Range</option>
                        <option value="today">Today</option>
                        <option value="week">This Week</option>
                        <option value="month">This Month</option>
                        <option value="year">This Year</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Start Date</label>
                    <input type="date" id="startDate" value="<%= startDate %>">
                </div>
                <div class="filter-group">
                    <label>End Date</label>
                    <input type="date" id="endDate" value="<%= endDate %>">
                </div>
            </div>
            <button class="apply-btn" onclick="applyFilters()">Apply Filters</button>
        </div>

        <div class="sales-table">
            <table>
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Date</th>
                        <th>Customer</th>
                        <th>Amount</th>
                        <th>Discount</th>
                        <th>Payment Method</th>
                        <th>Final Amount</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <% orders.forEach(order=> { %>
                        <tr>
                            <td>
                                <%= order.orderId %>
                            </td>
                            <td>
                                <%= order.createdOn %> 
                            </td>
                            <td>
                                <%= order.userId.name %>
                            </td>
                            <td>₹<%= order.totalPrice.toLocaleString() %>
                            </td>
                            <td>₹<%= order.discount.toLocaleString() %>
                            </td>
                            <td>
                                <%= order.paymentMethod %>
                            </td>
                            <td>₹<%= order.finalAmount.toLocaleString() %>
                            </td>
                            <td>
                                <span class="status-badge status-<%= order.status.toLowerCase() %>">
                                    <%= order.status %>
                                </span>
                            </td>
                        </tr>
                        <% }); %>
                </tbody>
            </table>
        </div>
        <div class="pagination">
            <button class="pagination-btn" id="prevPage" onclick="changePage(-1)">Previous</button>
            <span class="pagination-info">
                Page <span id="currentPage">1</span> of <span id="totalPages">1</span>
            </span>
            <button class="pagination-btn" id="nextPage" onclick="changePage(1)">Next</button>
        </div>
    </div>

    <div class="pdf-content" id="pdfContent">
        <div class="header">
            <h1>Sales Report</h1>
            <div class="date">Generated on: <span id="reportDate"></span></div>
        </div>

        <div class="summary">
            <div class="summary-item">
                <div class="label">Total Sales</div>
                <div class="value" id="pdfSalesCount">0</div>
            </div>
            <div class="summary-item">
                <div class="label">Total Revenue</div>
                <div class="value" id="pdfRevenue">₹0</div>
            </div>
            <div class="summary-item">
                <div class="label">Total Discount</div>
                <div class="value" id="pdfDiscount">₹0</div>
            </div>
        </div>


        <table id="pdfTable">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Date</th>
                    <th>Customer</th>
                    <th>Amount</th>
                    <th>Discount</th>
                    <th>Payment Method</th>
                    <th>Final Amount</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="pdfTableBody">
            </tbody>
        </table>
    </div>

    <script>
        async function applyFilters() {
            const dateRange = document.getElementById('dateRange').value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            try {
                const response = await fetch('/admin/sales-report/filter', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ dateRange, startDate, endDate })
                });

                const data = await response.json();

                if (!data.success && data.error) {
                    alert(data.error);
                    return;
                }

              
                updateDisplay(data);

                
                currentPage = 1;
                allOrders = data.orders;
                initializePagination(data.orders);

            } catch (error) {
                console.error('Error applying filters:', error);
                alert('An error occurred while filtering the sales report');
            }
        }

        function initializePagination(orders) {
            allOrders = orders;
            const totalPages = Math.ceil(allOrders.length / ITEMS_PER_PAGE);
            document.getElementById('totalPages').textContent = totalPages;
            document.getElementById('currentPage').textContent = '1';
            updatePaginationButtons();
            displayCurrentPage();
        }


        function updateDisplay(data) {
            // Update stats
            document.querySelectorAll('.stat-value')[0].textContent = data.stats.salesCount;
            document.querySelectorAll('.stat-value')[1].textContent = '₹' + data.stats.orderAmount.toLocaleString();
            document.querySelectorAll('.stat-value')[2].textContent = '₹' + data.stats.discount.toLocaleString();



            const ordersTbody = document.querySelector('.sales-table tbody');
            if (ordersTbody && data.orders) {
                ordersTbody.innerHTML = data.orders.map(order => `
            <tr>
                <td>${order.orderId}</td>
                <td>${new Date(order.createdOn).toLocaleDateString()}</td>
                <td>${order.userId.name}</td>
                <td>₹${order.totalPrice.toLocaleString()}</td>
                <td>₹${order.discount.toLocaleString()}</td>
                <td>₹${order.finalAmount.toLocaleString()}</td>
                <td>
                    <span class="status-badge status-${order.status.toLowerCase()}">
                        ${order.status}
                    </span>
                </td>
            </tr>
        `).join('');
            }


            const topProductsBody = document.querySelector('.stat-card:nth-child(1) tbody');
            if (topProductsBody && data.topProducts) {
                topProductsBody.innerHTML = data.topProducts.map(product => `
            <tr>
                <td>${product.productName}</td>
                <td class="text-right">${product.totalQuantity}</td>
                <td class="text-right">₹${product.totalRevenue.toLocaleString()}</td>
            </tr>
        `).join('');
            }

           
            const topCategoriesBody = document.querySelector('.stat-card:nth-child(2) tbody');
            if (topCategoriesBody && data.topCategories) {
                topCategoriesBody.innerHTML = data.topCategories.map(category => `
            <tr>
                <td>${category.categoryName}</td>
                <td class="text-right">${category.totalQuantity}</td>
                <td class="text-right">₹${category.totalRevenue.toLocaleString()}</td>
            </tr>
        `).join('');
            }
        }




        document.getElementById('dateRange').addEventListener('change', function () {
            const customDateFields = document.querySelectorAll('input[type="date"]');
            if (this.value === 'custom') {
                customDateFields.forEach(field => field.style.display = 'block');
            } else {
                customDateFields.forEach(field => field.style.display = 'none');
            }
        });

        async function downloadPDF() {
    try {
       
        document.getElementById('reportDate').textContent = new Date().toLocaleDateString();

       
        const statElements = document.querySelectorAll('.stat-value');
        if (statElements.length >= 3) {
            document.getElementById('pdfSalesCount').textContent = statElements[0].textContent;
            document.getElementById('pdfRevenue').textContent = statElements[1].textContent;
            document.getElementById('pdfDiscount').textContent = statElements[2].textContent;
        }

       
        const pdfTableBody = document.getElementById('pdfTableBody');
        const salesTable = document.querySelector('.sales-table tbody');

        if (!salesTable) {
            throw new Error('Sales table not found');
        }

        const originalRows = salesTable.getElementsByTagName('tr');
        
      
        pdfTableBody.innerHTML = '';
        
        Array.from(originalRows).forEach(row => {
            const cells = row.getElementsByTagName('td');
            const statusBadge = cells[7].querySelector('.status-badge');
            const statusClass = statusBadge ? statusBadge.classList[1]?.split('-')[1] || 'default' : 'default';
            const statusText = cells[7].textContent.trim();
            
           
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td>${cells[0]?.textContent.substring(0, 10) || ''}</td>
                <td>${cells[1]?.textContent.substring(0, 10) || ''}</td>
                <td>${cells[2]?.textContent.substring(0, 15) || ''}</td>
                <td class="amount">${cells[3]?.textContent || ''}</td>
                <td class="amount">${cells[4]?.textContent || ''}</td>
                <td>${cells[5]?.textContent.substring(0, 10) || ''}</td>
                <td class="amount">${cells[6]?.textContent || ''}</td>
                <td><span class="status status-${statusClass}">${statusText}</span></td>
            `;
            pdfTableBody.appendChild(newRow);
        });

        const opt = {
            margin: [10, 5, 10, 5], 
            filename: `sales-report-${new Date().toISOString().split('T')[0]}.pdf`,
            image: { type: 'jpeg', quality: 0.95 },
            html2canvas: {
                scale: 1.2, 
                useCORS: true,
                logging: false,
                width: 1200,
                windowWidth: 1200 
            },
            jsPDF: {
                unit: 'mm',
                format: 'a3', 
                orientation: 'landscape',
                compress: true,
                hotfixes: ["px_scaling"] 
            }
        };

        const element = document.getElementById('pdfContent');
        if (!element) {
            throw new Error('PDF content element not found');
        }

        
        const originalDisplay = element.style.display;
        element.style.display = 'block';
        element.style.width = '1100px';
        
        await html2pdf().set(opt).from(element).save();

       
        element.style.display = originalDisplay;
        element.style.width = '';

    } catch (error) {
        console.error('Error generating PDF:', error);
        alert('Error generating PDF. Please try again.');
    }
}


    </script>

    <script>
        let salesChart = null;

        function changePeriod(period) {

            document.querySelectorAll('.export-btn').forEach(btn => {
                btn.style.backgroundColor = '#2d3748';
            });

            document.getElementById(period + 'Btn').style.backgroundColor = '#4a5568';

            initializeChart(period);
        }

        function initializeChart(period = 'daily') {
            const ctx = document.getElementById('salesChart');
            const chartData = <%-chartData %>;

            if (salesChart) {
                salesChart.destroy();
            }


            const yAxisFormat = (value) => {
                if (period === 'yearly' && value >= 1000000) {
                    return '₹' + (value / 1000000).toFixed(1) + 'M';
                } else if (value >= 1000) {
                    return '₹' + (value / 1000).toFixed(1) + 'K';
                }
                return '₹' + value.toLocaleString();
            };

            salesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: chartData[period].labels,
                    datasets: [
                        {
                            label: 'Sales Amount (₹)',
                            data: chartData[period].sales,
                            borderColor: '#0284c7',
                            backgroundColor: 'rgba(2, 132, 199, 0.1)',
                            borderWidth: 2,
                            tension: 0.4,
                            fill: true
                        },
                        {
                            label: 'Number of Orders',
                            data: chartData[period].count,
                            borderColor: '#34d399',
                            borderWidth: 2,
                            tension: 0.4,
                            borderDash: [5, 5],
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: {
                                color: '#a0aec0'
                            }
                        },
                        tooltip: {
                            backgroundColor: '#1a1d21',
                            titleColor: '#fff',
                            bodyColor: '#a0aec0',
                            callbacks: {
                                label: function (context) {
                                    if (context.dataset.label.includes('Sales')) {
                                        return `Sales: ${yAxisFormat(context.raw)}`;
                                    }
                                    return `Orders: ${context.raw}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                color: '#2d3748'
                            },
                            ticks: {
                                color: '#a0aec0'
                            }
                        },
                        y: {
                            grid: {
                                color: '#2d3748'
                            },
                            ticks: {
                                color: '#a0aec0',
                                callback: yAxisFormat
                            }
                        }
                    }
                }
            });
        }


        document.addEventListener('DOMContentLoaded', () => {
            initializeChart('daily');

            document.getElementById('dailyBtn').style.backgroundColor = '#4a5568';
        });

        async function downloadExcel() {
            try {
                const dateRange = document.getElementById('dateRange').value;
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;

                const response = await fetch('/admin/sales-report/excel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ dateRange, startDate, endDate })
                });

                if (!response.ok) {
                    throw new Error('Failed to generate Excel');
                }

                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `sales-report-${new Date().toISOString().split('T')[0]}.xlsx`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                a.remove();

            } catch (error) {
                console.error('Error downloading Excel:', error);
                alert('Error generating Excel report. Please try again.');
            }
        }
    </script>
    <script>
        const ITEMS_PER_PAGE = 10; 
        let currentPage = 1;
        let allOrders = []; 



       
        function updatePaginationButtons() {
            const totalPages = Math.ceil(allOrders.length / ITEMS_PER_PAGE);
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages;
            document.getElementById('currentPage').textContent = currentPage;
        }

        // Change page
        function changePage(delta) {
            const totalPages = Math.ceil(allOrders.length / ITEMS_PER_PAGE);
            const newPage = currentPage + delta;

            if (newPage >= 1 && newPage <= totalPages) {
                currentPage = newPage;
                displayCurrentPage();
                updatePaginationButtons();
            }
        }

        function displayCurrentPage() {
            const start = (currentPage - 1) * ITEMS_PER_PAGE;
            const end = start + ITEMS_PER_PAGE;
            const pageOrders = allOrders.slice(start, end);

            const ordersTbody = document.querySelector('.sales-table tbody');
            ordersTbody.innerHTML = pageOrders.map(order => `
        <tr>
            <td>${order.orderId}</td>
            <td>${new Date(order.createdOn).toLocaleDateString()}</td>
            <td>${order.userId.name}</td>
            <td>₹${order.totalPrice.toLocaleString()}</td>
            <td>₹${order.discount.toLocaleString()}</td>
            <td>${order.paymentMethod}</td>
            <td>₹${order.finalAmount.toLocaleString()}</td>
            <td>
                <span class="status-badge status-${order.status.toLowerCase()}">
                    ${order.status}
                </span>
            </td>
        </tr>
    `).join('');
        }

        document.addEventListener('DOMContentLoaded', () => {
    // Initialize orders
    const initialOrders = Array.from(document.querySelector('.sales-table tbody').getElementsByTagName('tr')).map(row => {
        const cells = row.getElementsByTagName('td');
        return {
            orderId: cells[0].textContent.trim(),
            createdOn: new Date(cells[1].textContent.trim()),
            userId: { name: cells[2].textContent.trim() },
            totalPrice: parseFloat(cells[3].textContent.replace('₹', '').replace(/,/g, '')),
            discount: parseFloat(cells[4].textContent.replace('₹', '').replace(/,/g, '')),
            paymentMethod: cells[5].textContent.trim(),
            finalAmount: parseFloat(cells[6].textContent.replace('₹', '').replace(/,/g, '')),
            status: cells[7].querySelector('.status-badge').textContent.trim()
        };
    });

   
    if (initialOrders && initialOrders.length > 0) {
        allOrders = initialOrders;
        currentPage = 1;
        initializePagination(initialOrders);
    }

    
    initializeChart('daily');
    document.getElementById('dailyBtn').style.backgroundColor = '#4a5568';
});
    </script>
</body>

</html>