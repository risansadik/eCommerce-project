<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        @font-face {
            font-family: 'FontAwesome';
            src: url('/fonts/fontawesome-webfont.woff2') format('woff2');
        }

        /* Icon classes */
        .fa-arrow-left::before {
            content: "\f060";
        }

        .fa-heart::before {
            content: "\f004";
        }

        .fa-user::before {
            content: "\f007";
        }

        .fa-cart-shopping::before {
            content: "\f07a";
        }

        .fa-gauge::before {
            content: "\f62a";
        }

        .fa-box::before {
            content: "\f466";
        }

        .fa-location-dot::before {
            content: "\f3c5";
        }

        .fa-wallet::before {
            content: "\f555";
        }

        .fa-users::before {
            content: "\f0c0";
        }

        .fa-right-from-bracket::before {
            content: "\f2f5";
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }

        .header {
            background-color: #437A59;
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 20px;
            font-weight: bold;
        }

        .nav-items {
            display: flex;
            gap: 20px;
        }

        .nav-icons {
            display: flex;
            gap: 20px;
        }

        .container {
            display: flex;
            min-height: calc(100vh - 60px);
        }

        .sidebar {
            width: 250px;
            background-color: white;
            padding: 20px 0;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        }

        .sidebar-item {
            padding: 12px 20px;
            display: flex;
            align-items: center;
            gap: 10px;
            color: #333;
            text-decoration: none;
        }

        .sidebar-item.active {
            background-color: #f0f0f0;
        }

        .main-content {
            flex: 1;
            padding: 20px;
            background-color: #f5f5f5;
        }

        /* New styles for order details */
        .order-details-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
            margin: 20px 0;
            padding: 20px;
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #dee2e6;
        }

        .order-info h2 {
            margin: 0;
            color: #333;
        }

        .order-status {
            text-align: right;
        }

        .order-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 30px;
            margin-bottom: 30px;
        }

        .info-box {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
        }

        .info-box h3 {
            margin: 0 0 15px 0;
            color: #437A59;
            font-size: 16px;
        }

        .info-box p {
            margin: 5px 0;
            color: #666;
        }

        .order-items {
            margin-top: 30px;
        }

        .item-card {
            display: flex;
            padding: 20px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            margin-bottom: 15px;
        }

        .item-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 4px;
            margin-right: 20px;
        }

        .item-details {
            flex: 1;
        }

        .item-price {
            text-align: right;
            min-width: 150px;
        }

        .price-summary {
            margin-top: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .price-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .price-row.total {
            font-weight: bold;
            color: #437A59;
            border-top: 1px solid #dee2e6;
            padding-top: 10px;
            margin-top: 10px;
        }

        .back-button {
            padding: 8px 16px;
            background-color: #437A59;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            margin-bottom: 20px;
        }

        .status-badge {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            text-align: center;
            min-width: 100px;
            color: white;
        }

        .status-shipped {
            background-color: #437A59;
        }

        .cancel-btn {
            padding: 8px 16px;
            background-color: #d9534f;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 10px;
        }

        .cancel-btn:disabled {
            background-color: #999;
            cursor: not-allowed;
        }

        .status-cancelled {
            background-color: #d9534f;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            position: relative;
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 500px;
        }

        .close-modal {
            position: absolute;
            right: 20px;
            top: 10px;
            font-size: 24px;
            cursor: pointer;
        }

        .cancelled-item {
            opacity: 0.7;
            background-color: #f8f8f8;
            position: relative;
        }

        .cancelled-item::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 255, 255, 0.3);
            pointer-events: none;
        }

        .cancelled-text {
            color: #dc3545;
            font-weight: bold;
            margin-top: 5px;
        }

        .status-cancelled {
            background-color: #dc3545;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.9em;
        }

        .return-btn {
            padding: 8px 16px;
            background-color: #437A59;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 10px;
            margin-left: 10px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            position: relative;
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 500px;
        }

        .close-modal {
            position: absolute;
            right: 20px;
            top: 10px;
            font-size: 24px;
            cursor: pointer;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

        .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            resize: vertical;
        }

        .fa-money-bill::before {
            content: "\f0d6";
        }

        .fa-wallet::before {
            content: "\f555";
        }

        .fa-credit-card::before {
            content: "\f09d";
        }

        .payment-info {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }

        .payment-method {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
        }

        .payment-method i {
            color: #437A59;
            width: 20px;
        }

        .payment-badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            background-color: #f0f0f0;
            border-radius: 4px;
            font-size: 0.9em;
            color: #333;
            text-transform: uppercase;
        }

        .payment-status {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.9em;
            color: white;
            margin-left: 8px;
        }

        .status-completed {
            background-color: #28a745;
        }

        .status-pending {
            background-color: #ffc107;
            color: #000;
        }

        .status-failed {
            background-color: #dc3545;
        }

        .status-refunded {
            background-color: #6c757d;
        }

        .transaction-id {
            font-family: monospace;
            background: #f8f9fa;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.9em;
        }

        .txt {

            text-decoration: none;
            color: white;
        }

        .invoice-section {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }

        .invoice-btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background-color: #437A59;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.2s;
        }

        .invoice-btn:hover {
            background-color: #3a6a4d;
        }

        .invoice-btn:disabled {
            background-color: #999;
            cursor: not-allowed;
        }

        .invoice-btn i {
            font-size: 16px;
        }
        .txt{

            text-decoration: none;
            color: white;
        }
    </style>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
</head>

<body>
    <!-- Header -->
    <div class="header">
        <div class="logo">Brossoc</div>
        <div class="nav-items">
            <a href="/" class="txt"><div>Home</div></a>
            <a href="/shop" class="txt"><div>Shop</div></a>
            <a href="/about" class="txt"><div>About us</div></a>
            <a href="/contact" class="txt"><div>Contact us</div></a>
        </div>
        <div class="nav-icons">
            <a href="/wishlist" class="txt"><span><i class="fa-solid fa-heart"></i></span></a>
            <a href="/userProfile" class="txt"><span><i class="fa-solid fa-user"></i></span></a>
            <a href="/cart" class="txt" <span><i class="fa-solid fa-cart-shopping"></i></span></a>
        </div>
    </div>

    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <a href="/userProfile" class="sidebar-item"><span><i class="fa-solid fa-gauge"></i></span>Dashboard</a>
            <a href="/orders" class="sidebar-item active"><span><i class="fa-solid fa-box"></i></span> Orders</a>
            <a href="/addresses" class="sidebar-item"><span><i class="fa-solid fa-location-dot"></i></span> My
                Address</a>
            <a href="/wallet" class="sidebar-item"><span><i class="fa-solid fa-wallet"></i></span> Wallet</a>
            <a href="/referral" class="sidebar-item"><span><i class="fa-sharp fa-solid fa-users"></i></span>
                Referral</a>
            <a href="/logout" class="sidebar-item"><span><i class="fa-solid fa-right-from-bracket"></i></span>
                Logout</a>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <a href="/orders" class="back-button"><i class="fa-arrow-left"></i> Back to Orders</a>

            <div class="order-details-container">
                <div class="order-header">
                    <div class="order-info">
                        <div class="info-box">
                            <h3>Order Information</h3>
                            <p>Order Status: <%= order.status %>
                            </p>
                            <p>Order Date: <%= new Date(order.createdOn).toLocaleDateString() %>
                            </p>

                            <div class="payment-info">
                                <div class="payment-method">
                                    <i class="fa-solid 
                                        <%= order.paymentMethod === 'cod' ? 'fa-money-bill' : 
                                            order.paymentMethod === 'wallet' ? 'fa-wallet' : 
                                            'fa-credit-card' %>">
                                    </i>
                                    <span>Payment Method:</span>
                                    <span class="payment-badge">
                                        <%= order.paymentMethod==='cod' ? 'Cash on Delivery' :
                                            order.paymentMethod==='wallet' ? 'Wallet' : 'Razorpay' %>
                                    </span>
                                    <% if (order.status !=='Cancelled' && order.status !=='Returned' ) { %>
                                        <span class="payment-status status-<%= order.paymentStatus %>">
                                            <%= order.paymentStatus %>
                                        </span>
                                        <% } %>
                                </div>

                                <% if (order.paymentMethod==='razorpay' && order.razorpayPaymentId) { %>
                                    <p>Transaction ID: <span class="transaction-id">
                                            <%= order.razorpayPaymentId %>
                                        </span></p>
                                    <% } %>

                                        <!-- Invoice Download Section -->
                                        <% if (order.canDownloadInvoice) { %>
                                            <div class="invoice-section">
                                                <% if (order.invoiceNumber) { %>
                                                    <p>Invoice Number: <%= order.invoiceNumber %>
                                                    </p>
                                                    <p>Generated on: <%= new
                                                            Date(order.invoiceGeneratedAt).toLocaleDateString() %>
                                                    </p>
                                                    <% } %>
                                                        <button onclick="downloadInvoice('<%= order.orderId %>', this)"
                                                            class="invoice-btn">
                                                            <i class="fas fa-file-pdf"></i> Download Invoice
                                                        </button>
                                            </div>
                                            <% } %>
                            </div>
                        </div>
                    </div>
                    <div class="order-status">
                        <span class="status-badge status-<%= order.status.toLowerCase() %>">
                            <%= order.status %>
                        </span>

                        <% if (order.status !=='Returned' && order.canCancel && order.status !=='Cancelled' ) { %>
                            <button onclick="confirmCancelOrder('<%= order.orderId %>')" class="cancel-btn">
                                Cancel Order
                            </button>
                            <% } %>

                                <% if (order.status==='Delivered' ) { %>
                                    <button onclick="openReturnModal('<%= order.orderId %>')" class="return-btn">
                                        Return Order
                                    </button>
                                    <% } %>
                    </div>
                </div>


                <div class="order-grid">
                    <div class="info-box">
                        <h3>Shipping Address</h3>
                        <p>
                            <%= order.address.name %>
                        </p>
                        <p>
                            <%= order.address.street %>
                        </p>
                        <p>
                            <%= order.address.city %>, <%= order.address.state %>
                        </p>
                        <p>
                            <%= order.address.pincode %>
                        </p>
                        <p>Phone: <%= order.address.mobile %>
                        </p>
                    </div>


                    <div class="info-box">
                        <h3>Order Information</h3>
                        <p>Order Status: <%= order.status %>
                        </p>
                        <p>Order Date: <%= new Date(order.createdOn).toLocaleDateString() %>
                        </p>
                        <% if (order.invoiceDate) { %>
                            <p>Invoice Date: <%= new Date(order.invoiceDate).toLocaleDateString() %>
                            </p>
                            <% } %>

                                <div class="payment-info">
                                    <div class="payment-method">
                                        <i class="fa-solid 
                                    <%= order.paymentMethod === 'cod' ? 'fa-money-bill' : 
                                        order.paymentMethod === 'wallet' ? 'fa-wallet' : 
                                        'fa-credit-card' %>">
                                        </i>
                                        <span>Payment Method:</span>
                                        <span class="payment-badge">
                                            <%= order.paymentMethod==='cod' ? 'Cash on Delivery' :
                                                order.paymentMethod==='wallet' ? 'Wallet' : 'Razorpay' %>
                                        </span>
                                        <% if (order.status !=='Cancelled' && order.status !=='Returned' ) { %>
                                            <span class="payment-status status-<%= order.paymentStatus %>">
                                                <%= order.paymentStatus %>
                                            </span>
                                            <% } %>
                                    </div>

                                    <% if (order.status !=='Cancelled' && order.status !=='Returned' &&
                                        order.paymentMethod==='razorpay' && order.razorpayPaymentId) { %>
                                        <p>Transaction ID: <span class="transaction-id">
                                                <%= order.razorpayPaymentId %>
                                            </span></p>
                                        <% } %>
                                </div>
                    </div>
                </div>
            </div>



            <% // Sort items to show active items first, then cancelled const
                sortedItems=[...order.orderedItems].sort((a, b)=> {
                if (a.status === 'Cancelled' && b.status !== 'Cancelled') return 1;
                if (a.status !== 'Cancelled' && b.status === 'Cancelled') return -1;
                return 0;
                });
                %>

                <div class="order-items">
                    <h3>Order Items</h3>
                    <% sortedItems.forEach(item=> { %>
                        <div class="item-card <%= item.status === 'Cancelled' ? 'cancelled-item' : '' %>"
                            id="item-<%= item._id %>" data-item-id="<%= item._id %>"
                            data-item-status="<%= item.status %>">

                            <% if (item.product && item.product.productImage && item.product.productImage.length> 0)
                                { %>
                                <img src="/uploads/product-images/<%= item.product.productImage[0] %>"
                                    alt="<%= item.product.productName %>" class="item-image"
                                    onerror="this.src='/images/default-product.jpg'">
                                <% } else { %>
                                    <img src="/images/default-product.jpg" alt="Product image" class="item-image">
                                    <% } %>

                                        <div class="item-details">
                                            <h4>
                                                <%= item.product ? item.product.productName : 'Product Unavailable' %>
                                            </h4>
                                            <p>Size: <%= item.size %>
                                            </p>
                                            <p>Quantity: <%= item.quantity %>
                                            </p>
                                            <% if (item.status==='Cancelled' ) { %>
                                                <span class="status-badge status-cancelled">Cancelled</span>
                                                <% } else if (order.canCancel) { %>
                                                    <button
                                                        onclick="confirmCancelItem('<%= order.orderId %>', '<%= item._id %>')"
                                                        class="cancel-btn">
                                                        Cancel Item
                                                    </button>
                                                    <% } %>
                                        </div>



                                        <div class="item-price">
                                            <p>₹<%= item.price.toFixed(2)/item.quantity %> × <%= item.quantity %>
                                            </p>
                                            <p><strong>Total: ₹<%= ((item.price/item.quantity) *
                                                        item.quantity).toFixed(2) %></strong></p>
                                            <% if (item.status==='Cancelled' ) { %>
                                                <p class="cancelled-text">Item Cancelled</p>
                                                <% } %>
                                        </div>
                        </div>
                        <% }); %>
                </div>



                <div class="price-summary">
                    <% const activeItems=order.orderedItems.filter(item=> item.status !== 'Cancelled'); %>
                        <% const subtotal=activeItems.reduce((sum, item)=> sum + (item.price/item.quantity *
                            item.quantity), 0); %>

                            <div class="price-row">
                                <span>Subtotal</span>
                                <span>₹<%= subtotal.toFixed(2) %></span>
                            </div>

                            <% if (order.discount> 0) { %>
                                <div class="price-row">
                                    <span>Discount</span>
                                    <span>-₹<%= order.discount.toFixed(2) %></span>
                                </div>
                                <% } %>

                                    <div class="price-row total">
                                        <span>Total</span>
                                        <span>₹<%= order.finalAmount.toFixed(2) %></span>
                                    </div>
                </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeModal()">&times;</span>
            <h3 id="modalTitle">Confirm Cancellation</h3>
            <p id="modalMessage"></p>
            <div style="margin-top: 20px">
                <button onclick="closeModal()" style="margin-right: 10px">No, Keep It</button>
                <button id="confirmButton" class="cancel-btn">Yes, Cancel</button>
            </div>
        </div>
    </div>
    </div>
    </div>
    </div>
    <!-- Return Request Modal -->
    <div id="returnModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeReturnModal()">&times;</span>
            <h3>Return Order</h3>
            <form id="returnForm">
                <input type="hidden" id="returnOrderId" name="orderId" value="<%= order._id %>">
                <div class="form-group">
                    <label for="returnReason">Reason for Return</label>
                    <textarea id="returnReason" name="returnReason" rows="4" required></textarea>
                </div>
                <button type="submit" class="return-btn">Submit Return Request</button>
            </form>
        </div>
    </div>

    <script>
        function showModal(title, message, confirmCallback) {
            document.getElementById('modalTitle').textContent = title;
            document.getElementById('modalMessage').textContent = message;
            document.getElementById('confirmButton').onclick = confirmCallback;
            document.getElementById('confirmModal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('confirmModal').style.display = 'none';
        }
        const confirmCancelItem = async (orderId, itemId) => {
            try {
                const result = await Swal.fire({
                    title: 'Cancel Item?',
                    text: 'Are you sure you want to cancel this item?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, cancel it!',
                    cancelButtonText: 'No, keep it'
                });

                if (result.isConfirmed) {
                    const response = await fetch(`/orders/${orderId}/items/${itemId}/cancel`, {
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Update item UI
                        const itemCard = document.querySelector(`#item-${itemId}`);
                        if (itemCard) {
                            itemCard.classList.add('cancelled-item');
                            itemCard.setAttribute('data-item-status', 'Cancelled');

                            // Replace cancel button with status badge
                            const cancelBtn = itemCard.querySelector('.cancel-btn');
                            if (cancelBtn) {
                                const statusBadge = document.createElement('span');
                                statusBadge.className = 'status-badge status-cancelled';
                                statusBadge.textContent = 'Cancelled';
                                cancelBtn.parentNode.replaceChild(statusBadge, cancelBtn);
                            }
                        }

                        // Update price summary
                        const priceSummary = document.querySelector('.price-summary');
                        if (priceSummary) {
                            const subtotalElem = priceSummary.querySelector('.price-row:first-child span:last-child');
                            const totalElem = priceSummary.querySelector('.price-row.total span:last-child');

                            if (subtotalElem) subtotalElem.textContent = `₹${data.updatedOrder.totalPrice}`;
                            if (totalElem) totalElem.textContent = `₹${data.updatedOrder.finalAmount}`;
                        }

                        // Update order status if fully cancelled
                        if (data.updatedOrder.isFullyCancelled) {
                            // Update main order status
                            const statusBadge = document.querySelector('.order-status .status-badge');
                            if (statusBadge) {
                                statusBadge.className = 'status-badge status-cancelled';
                                statusBadge.textContent = 'Cancelled';
                            }

                            // Hide all remaining cancel buttons
                            document.querySelectorAll('.cancel-btn').forEach(btn => {
                                btn.style.display = 'none';
                            });

                            // Update price summary to show zero
                            if (priceSummary) {
                                priceSummary.querySelectorAll('.price-row span:last-child').forEach(span => {
                                    span.textContent = '₹0.00';
                                });
                            }
                        }

                        await Swal.fire({
                            title: data.updatedOrder.isFullyCancelled ? 'Order Cancelled' : 'Item Cancelled',
                            text: data.updatedOrder.isFullyCancelled ?
                                'The entire order has been cancelled.' :
                                'The item has been cancelled successfully.',
                            icon: 'success'
                        });

                    } else {
                        throw new Error(data.message || 'Failed to cancel item');
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    title: 'Error!',
                    text: error.message || 'An error occurred while cancelling the item',
                    icon: 'error'
                });
            }
        };
        const confirmCancelOrder = async (orderId) => {
            try {
                const result = await Swal.fire({
                    title: 'Cancel Order?',
                    text: 'Are you sure you want to cancel this entire order?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, cancel it!',
                    cancelButtonText: 'No, keep it'
                });

                if (result.isConfirmed) {
                    const response = await fetch(`/orders/${orderId}/cancel`, {
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();

                    if (data.success) {
                        await Swal.fire({
                            title: 'Cancelled!',
                            text: 'The order has been cancelled successfully.',
                            icon: 'success'
                        });
                        window.location.reload();
                    } else {
                        throw new Error(data.message || 'Failed to cancel order');
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    title: 'Error!',
                    text: error.message || 'An error occurred while cancelling the order',
                    icon: 'error'
                });
            }
        };


        function openReturnModal(orderId) {
            document.getElementById('returnOrderId').value = orderId;
            document.getElementById('returnModal').style.display = 'block';
        }


        function closeReturnModal() {
            document.getElementById('returnModal').style.display = 'none';
        }


        document.getElementById('returnForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const orderId = document.getElementById('returnOrderId').value; // This should be orderId (UUID)
            const returnReason = document.getElementById('returnReason').value;

            try {
                const response = await fetch('/submit-return', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ orderId, returnReason })
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Return request submitted successfully.',
                        icon: 'success'
                    });
                    closeReturnModal();
                    window.location.reload(); // Refresh the page to update the status
                } else {
                    throw new Error(data.message || 'Failed to submit return request');
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: error.message || 'Failed to submit return request',
                    icon: 'error'
                });
            }
        });

        async function downloadInvoice(orderId, buttonElement) {
            const btn = buttonElement || event.target.closest('.invoice-btn');
            const originalText = btn ? btn.innerHTML : '';

            try {
                const response = await fetch(`/orders/${orderId}/invoice`);

                if (!response.ok) {
                    throw new Error('Failed to fetch invoice details');
                }

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.message || 'Failed to generate invoice');
                }

                const { order } = data;

                // Provide default address if null
                const address = order.address || {
                    name: 'N/A',
                    street: 'N/A',
                    city: 'N/A',
                    state: 'N/A',
                    pincode: 'N/A',
                    mobile: 'N/A'
                };

                // Update the billToDetails template in downloadInvoice function
                const billToDetails = `
    <div class="bill-to-details">
        <h3>Bill To</h3>
        <p>${address.name}</p>
        <p>${address.street}</p>
        <p>${address.city}, ${address.state}</p>
        <p>${address.pincode}</p>
        <p>Phone: ${address.mobile}</p>
    </div>
`;

                const invoiceHtml = `
<!DOCTYPE html>
<html>
<head>
    <style>
        body { 
            font-family: 'Helvetica', Arial, sans-serif; 
            margin: 0; 
            padding: 40px; 
            max-width: 800px; 
            margin: 0 auto;
            background-color: #ffffff;
        }
        .invoice-header { 
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 2px solid #eef2f7;
        }
        .invoice-header h1 {
            color: #1a3353;
            font-size: 28px;
            margin-bottom: 10px;
        }
        .invoice-meta {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
            padding: 20px;
            background-color: #f8fafc;
            border-radius: 8px;
        }
        .meta-item {
            flex: 1;
        }
        .meta-item h4 {
            color: #64748b;
            margin-bottom: 8px;
            font-size: 14px;
            text-transform: uppercase;
        }
        .meta-item p {
            color: #1e293b;
            margin: 0;
            font-size: 15px;
        }
        .invoice-details { 
            display: flex; 
            justify-content: space-between; 
            margin-bottom: 40px;
            gap: 40px;
        }
        .from-details, .bill-to-details { 
            flex: 1;
            padding: 20px;
            background-color: #ffffff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
        }
        .section-title {
            color: #1a3353;
            margin-bottom: 15px;
            font-size: 18px;
        }
        .address-details p {
            margin: 5px 0;
            color: #475569;
            line-height: 1.5;
        }
        .order-items { 
            width: 100%; 
            border-collapse: separate;
            border-spacing: 0;
            margin-bottom: 30px;
            border-radius: 8px;
            overflow: hidden;
            border: 1px solid #e2e8f0;
        }
        .order-items th { 
            background-color: #f8fafc;
            padding: 12px 15px;
            text-align: left;
            color: #64748b;
            font-weight: 600;
            font-size: 14px;
            text-transform: uppercase;
        }
        .order-items td { 
            padding: 15px;
            border-top: 1px solid #e2e8f0;
            color: #475569;
        }
        .product-name {
            font-weight: 600;
            color: #1e293b;
        }
        .payment-details {
            background-color: #f8fafc;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }
        .payment-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
        }
        .totals { 
            text-align: right; 
            padding: 20px;
            background-color: #ffffff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
        }
        .total-row {
            display: flex;
            justify-content: flex-end;
            gap: 40px;
            margin-bottom: 8px;
        }
        .final-amount {
            font-size: 20px;
            font-weight: bold;
            color: #16a34a;
            padding-top: 10px;
            margin-top: 10px;
            border-top: 2px solid #e2e8f0;
        }
        .notes {
            margin-top: 30px;
            padding: 20px;
            background-color: #fffbeb;
            border-radius: 8px;
            color: #92400e;
        }
        .status-badge {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 9999px;
            font-size: 14px;
            font-weight: 500;
            background-color: #dcfce7;
            color: #16a34a;
        }
    </style>
</head>
<body>
    <div class="invoice-header">
        <h1>Invoice</h1>
        <p>Brossoc</p>
    </div>

    <div class="invoice-meta">
        <div class="meta-item">
            <h4>Invoice Number</h4>
            <p>${order.invoiceNumber}</p>
        </div>
        <div class="meta-item">
            <h4>Order Date</h4>
            <p>${new Date(order.orderDate).toLocaleDateString()}</p>
        </div>
        <div class="meta-item">
            <h4>Invoice Date</h4>
            <p>${new Date(order.invoiceGeneratedAt).toLocaleDateString()}</p>
        </div>
        <div class="meta-item">
            <h4>Status</h4>
            <p><span class="status-badge">${order.status}</span></p>
        </div>
    </div>

    <div class="invoice-details">
        <div class="from-details">
            <h3 class="section-title">From</h3>
            <div class="address-details">
                <p><strong>Brossoc Pvt. Ltd.</strong></p>
                <p>No. 123, 4th Main,</p>
                <p>Indiranagar, 2nd Stage,</p>
                <p>Bengaluru, Karnataka 560038</p>
                <p>India</p>
                <p>Email: contact@brossoc.com</p>
            </div>
        </div>

        <div class="bill-to-details">
            <h3 class="section-title">Bill To</h3>
            <div class="address-details">
                <p><strong>${address.name}</strong></p>
                <p>${address.street}</p>
                <p>${address.city}, ${address.state} ${address.pincode}</p>
                <p>Phone: ${address.mobile}</p>
            </div>
        </div>
    </div>

    <div class="payment-details">
        <h3 class="section-title">Payment Information</h3>
        <div class="payment-row">
            <span>Payment Method:</span>
            <span>${order.paymentMethod.toUpperCase()}</span>
        </div>
        <div class="payment-row">
            <span>Payment Status:</span>
            <span>${order.paymentStatus.toUpperCase()}</span>
        </div>
        ${order.razorpayPaymentId ? `
        <div class="payment-row">
            <span>Transaction ID:</span>
            <span>${order.razorpayPaymentId}</span>
        </div>
        ` : ''}
    </div>

    <table class="order-items">
        <thead>
            <tr>
                <th>Item</th>
                <th>Size</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
            </tr>
        </thead>
       <tbody>
    ${order.orderedItems
        .filter(item => item.status !== 'Cancelled') // Extra safety check
        .map(item => `
            <tr>
                <td>
                    <span class="product-name">${item.product?.productName || 'Product'}</span>
                </td>
                <td>${item.size}</td>
                <td>${item.quantity}</td>
                <td>₹${(item.price / item.quantity).toFixed(2)}</td>
                <td>₹${item.price.toFixed(2)}</td>
            </tr>
        `).join('')}
</tbody>
    </table>

    <div class="totals">
        <div class="total-row">
            <span>Subtotal:</span>
            <span>₹${order.totalPrice.toFixed(2)}</span>
        </div>
        ${order.discount > 0 ? `
        <div class="total-row">
            <span>Discount:</span>
            <span>₹${order.discount.toFixed(2)}</span>
        </div>
        ` : ''}
        <div class="total-row final-amount">
            <span>Final Amount:</span>
            <span>₹${order.finalAmount.toFixed(2)}</span>
        </div>
    </div>

    <div class="notes">
        <p><strong>Note:</strong> This is a computer-generated invoice. No signature is required.</p>
    </div>
</body>
</html>
`;

                // Create a temporary element to generate PDF
                const element = document.createElement('div');
                element.innerHTML = invoiceHtml;
                document.body.appendChild(element);

                // Generate PDF
                const opt = {
                    margin: [0.5, 0.5, 0.5, 0.5], // Adjust margins
                    filename: `invoice-${order.orderId}.pdf`,
                    image: { type: 'jpeg', quality: 0.98 },
                    html2canvas: {
                        scale: 2,
                        useCORS: true,
                        logging: false
                    },
                    jsPDF: {
                        unit: 'in',
                        format: 'a4', // Use A4 format
                        orientation: 'portrait'
                    }
                };

                html2pdf().set(opt).from(element).save();

                // Remove temporary element
                document.body.removeChild(element);

            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to download invoice',
                    icon: 'error'
                });
            } finally {
                if (btn) {
                    btn.innerHTML = originalText;
                    btn.disabled = false;
                }
            }
        }
    </script>
</body>

</html>