<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.5;
            color: #374151;
            background-color: #f9fafb;
        }

        .container {
            max-width: 1280px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .product-grid {
            background-color: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            display: grid;
            gap: 2rem;
        }

        @media (min-width: 768px) {
            .product-grid {
                grid-template-columns: 1fr 1fr;
                padding: 2rem;
            }
        }

        .gallery {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .main-image-container {
            position: relative;
            aspect-ratio: 1;
            border-radius: 0.5rem;
            overflow: hidden;
            background-color: #f3f4f6;
        }

        .main-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .gallery-nav {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            font-size: 14px;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .gallery-nav:hover {
            background: white;
        }

        .gallery-prev {
            left: 0.75rem;
        }

        .gallery-next {
            right: 0.75rem;
        }

        .thumbnails {
            display: flex;
            gap: 0.5rem;
            overflow-x: auto;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

        .thumbnails::-webkit-scrollbar {
            display: none;
        }

        .thumbnail {
            flex-shrink: 0;
            width: 4rem;
            aspect-ratio: 1;
            border: 2px solid transparent;
            border-radius: 0.375rem;
            cursor: pointer;
            overflow: hidden;
            background-color: #f3f4f6;
        }

        .thumbnail.active {
            border-color: #2563eb;
        }

        .thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .product-info {
            display: flex;
            flex-direction: column;
            gap: 1.25rem;
        }

        .product-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #4A665B;
            line-height: 1.25;
        }

        .price {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-top: 0.25rem;
        }

        .original-price {
            color: #6b7280;
            text-decoration: line-through;
            font-size: 0.875rem;
        }

        .sale-price {
            font-size: 1.25rem;
            font-weight: 600;
            color: #111827;
        }

        .description {
            color: #6b7280;
            font-size: 0.875rem;
            line-height: 1.5;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.375rem;
        }

        .form-label {
            font-size: 0.875rem;
            font-weight: 500;
            color: #374151;
        }

        .form-select,
        .form-input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            color: #374151;
            background-color: white;
        }

        .form-select:focus,
        .form-input:focus {
            outline: none;
            border-color: #2563eb;
            ring: 2px solid #2563eb;
        }

        .add-to-cart-section {
            display: flex;
            gap: 0.75rem;
        }

        .quantity-input {
            width: 5rem;
        }

        .add-to-cart-btn {
            flex: 1;
            padding: 0.625rem;
            background: #4A665B;
            color: white;
            border: none;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .add-to-cart-btn:hover {
            background: rgb(10, 15, 10);
        }

        .actions {
            display: flex;
            gap: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #e5e7eb;
        }

        .action-btn {
            display: flex;
            align-items: center;
            gap: 0.375rem;
            background: none;
            border: none;
            cursor: pointer;
            color: #374151;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

        .action-btn.active .heart-icon {
            fill: currentColor;
        }

        .heart-icon {
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            color: #2563eb;
        }

        .heart-icon {
            width: 1.25rem;
            height: 1.25rem;
        }

        .heart-icon.active {
            fill: #ef4444;
            stroke: #ef4444;
        }

        .reviews-section {
            width: 100%;
            margin: 20px 0;
            font-family: system-ui, -apple-system, sans-serif;
        }

        /* Dropdown Button */
        .reviews-dropdown-btn {
            width: 100%;
            padding: 15px 20px;
            background: #fff;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .reviews-dropdown-btn:hover {
            background: #f8f8f8;
        }

        .reviews-summary-preview {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .stars-preview {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #FFB800;
            font-size: 18px;
        }

        #averageScore {
            font-weight: 600;
            color: #333;
        }

        .dropdown-arrow {
            margin-left: auto;
            transition: transform 0.3s ease;
        }

        /* Dropdown Content */
        .reviews-dropdown-content {
            display: none;
            background: #fff;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin-top: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .reviews-dropdown-content.active {
            display: block;
        }

        .reviews-container {
            max-width: 900px;
            margin: 0 auto;
        }

        .reviews-title {
            font-size: 24px;
            font-weight: 600;
            color: #333;
            margin-bottom: 25px;
        }

        .reviews-summary {
            display: flex;
            gap: 40px;
            padding: 20px;
            background: #f9f9f9;
            border-radius: 12px;
            margin-bottom: 30px;
        }

        .average-rating {
            text-align: center;
            min-width: 200px;
        }

        .average-score-large {
            font-size: 48px;
            font-weight: 700;
            color: #333;
            line-height: 1;
            margin-bottom: 10px;
        }

        .stars-large {
            color: #FFB800;
            font-size: 24px;
            margin-bottom: 5px;
        }

        .review-count-large {
            color: #666;
            font-size: 14px;
        }

        .rating-bars {
            flex-grow: 1;
        }

        .rating-bar {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 8px 0;
        }

        .bar-label {
            width: 35px;
            color: #666;
            font-size: 14px;
        }

        .bar-container {
            flex-grow: 1;
            height: 8px;
            background: #eee;
            border-radius: 4px;
            overflow: hidden;
        }

        .bar-fill {
            height: 100%;
            background: #FFB800;
            transition: width 0.3s ease;
        }

        .bar-count {
            width: 40px;
            text-align: right;
            color: #666;
            font-size: 14px;
        }

        /* Review Form */
        .review-form-container {
            background: #fff;
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            padding: 25px;
            margin: 30px 0;
        }

        .review-form-container h3 {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 20px;
            color: #333;
        }

        .rating-input {
            display: flex;
            flex-direction: row-reverse;
            justify-content: flex-end;
            gap: 5px;
            margin-bottom: 20px;
        }

        .rating-input input {
            display: none;
        }

        .rating-input label {
            font-size: 28px;
            color: #ddd;
            cursor: pointer;
            transition: color 0.2s ease;
        }

        .rating-input label:hover,
        .rating-input label:hover~label,
        .rating-input input:checked~label {
            color: #FFB800;
        }

        #reviewText {
            width: 100%;
            min-height: 120px;
            padding: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 15px;
            font-size: 15px;
            resize: vertical;
        }

        .submit-review-btn {
            background: #4A90E2;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .submit-review-btn:hover {
            background: #357ABD;
        }

        /* Review List */
        .review-item {
            padding: 20px 0;
            border-bottom: 1px solid #e0e0e0;
        }

        .review-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .reviewer-name {
            font-weight: 600;
            color: #333;
        }

        .review-date {
            color: #666;
            font-size: 14px;
        }

        .review-rating {
            color: #FFB800;
            margin-bottom: 10px;
            font-size: 16px;
        }

        .review-text {
            color: #444;
            line-height: 1.6;
        }

        .login-prompt {
            text-align: center;
            padding: 30px;
            background: #f9f9f9;
            border-radius: 12px;
            margin: 30px 0;
        }

        .login-prompt a {
            color: #4A90E2;
            text-decoration: none;
            font-weight: 600;
        }

        .login-prompt a:hover {
            text-decoration: underline;
        }

        .zoomed-image {
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            transition: opacity 0.2s ease;
        }

        .zoomed-image.active {
            opacity: 1;
        }

        .error-message {
            color: #dc2626;
            /* Red color */
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .stock-message {
            color: #6b7280;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .related-products {
            margin-top: 4rem;
            padding-top: 2rem;
            border-top: 1px solid #e5e7eb;
        }

        .related-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #4A665B;
            margin-bottom: 1.5rem;
        }

        .related-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 2rem;
            margin-top: 1rem;
        }

        .related-product-card {
            background: white;
            border-radius: 0.5rem;
            overflow: hidden;
            transition: transform 0.2s, box-shadow 0.2s;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .related-product-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .product-link {
            text-decoration: none;
            color: inherit;
        }

        .related-image-container {
            aspect-ratio: 1;
            overflow: hidden;
        }

        .related-product-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .related-product-card:hover .related-product-image {
            transform: scale(1.05);
        }

        .related-product-info {
            padding: 1rem;
        }

        .related-product-title {
            font-size: 1rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: #374151;
        }

        .related-product-price {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .related-original-price {
            color: #6b7280;
            text-decoration: line-through;
            font-size: 0.875rem;
        }

        .related-sale-price {
            font-size: 1.125rem;
            font-weight: 600;
            color: #111827;
        }

        @media (max-width: 768px) {
            .related-grid {
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
                gap: 1rem;
            }

            .related-product-info {
                padding: 0.75rem;
            }

            .related-product-title {
                font-size: 0.875rem;
            }

            .related-sale-price {
                font-size: 1rem;
            }
        }

        .offer-badge {
            background-color: #28a745;
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 14px;
            margin-left: 8px;
        }
    </style>
</head>

<body>

    <div class="container">
        <div class="product-grid">
            <div class="gallery">
                <div class="main-image-container" id="imageContainer">
                    <% if (product.productImage && product.productImage.length> 0) { %>
                        <img src="/uploads/product-images/<%= product.productImage[0] %>"
                            alt="<%= product.productName %>" class="main-image" id="mainImage">
                        <img src="/uploads/product-images/<%= product.productImage[0] %>"
                            alt="<%= product.productName %> Zoomed" class="zoomed-image" id="zoomedImage">
                        <% } %>
                            <button class="gallery-nav gallery-prev" onclick="prevImage()">←</button>
                            <button class="gallery-nav gallery-next" onclick="nextImage()">→</button>
                </div>

                <div class="thumbnails" id="thumbnails">
                    <% if (product.productImage && product.productImage.length> 0) { %>
                        <% product.productImage.forEach((image, index)=> { %>
                            <div class="thumbnail <%= index === 0 ? 'active' : '' %>"
                                onclick="selectImage(<%= index %>)">
                                <img src="/uploads/product-images/<%= image %>"
                                    alt="<%= product.productName %> Thumbnail <%= index + 1 %>">
                            </div>
                            <% }); %>
                                <% } %>
                </div>
            </div>

            <div class="product-info">
                <div>
                    <h1 class="product-title">
                        <%= product.productName %>
                    </h1>
                    <div class="price">
                        <% if (product.regularPrice> product.salePrice) { %>
                            <span class="original-price">₹<%= product.regularPrice %></span>
                            <span class="sale-price">₹<%= product.salePrice %></span>
                            <% const priceDiscount=Math.round(((product.regularPrice - product.salePrice) /
                                product.regularPrice) * 100); if (priceDiscount> 0) {
                                %>
                                <span class="offer-badge">
                                    <%= priceDiscount %>% OFF
                                </span>
                                <% } %>
                                    <% } else { %>
                                        <span class="sale-price">₹<%= product.salePrice %></span>
                                        <% } %>
                    </div>
                </div>
                <p class="description">
                    <%=product.description%>
                </p>

                <!-- Size Selector -->
                <div class="form-group">
                    <label class="form-label">Size</label>
                    <select class="form-select" id="sizeSelect">
                        <option value="">Choose an option</option>
                        <% product.sizeVariants.forEach(variant=> { %>
                            <option value="<%= variant.size %>" data-quantity="<%= variant.quantity %>"
                                <%=variant.quantity===0 ? 'disabled' : '' %>>
                                <%= variant.size %>
                                    <%= variant.quantity===0 ? '(Out of Stock)' : '' %>
                            </option>
                            <% }); %>
                    </select>
                    <div id="size-message" class="text-sm mt-1 text-red-600"></div>
                </div>

                <div class="add-to-cart-section">
                    <div class="form-group quantity-input">
                        <label class="form-label">Quantity</label>
                        <input type="number" min="1" value="1" class="form-input" id="quantityInput" disabled>
                        <div id="quantity-message" class="text-sm mt-1 text-red-600"></div>
                    </div>
                    <button class="add-to-cart-btn" id="addToCartBtn">ADD TO CART</button>
                </div>



                <!-- Actions -->
                <div class="actions">
                    <button class="action-btn <%= isInWishlist ? 'active' : '' %>" id="wishlistBtn"
                        data-product-id="<%= product._id %>">
                        <svg width="24" height="24" viewBox="0 0 24 24"
                            fill="<%= isInWishlist ? 'currentColor' : 'none' %>" stroke="currentColor" stroke-width="2"
                            stroke-linecap="round" stroke-linejoin="round" class="heart-icon">
                            <path
                                d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z">
                            </path>
                        </svg>
                        Wishlist
                    </button>
                </div>

                <!-- Reviews Section -->
                <div class="reviews-section" data-product-id="<%= product._id %>">
                    <!-- Reviews Summary Button -->
                    <button class="reviews-dropdown-btn" id="reviewsToggle">
                        <div class="reviews-summary-preview">
                            <div class="stars-preview">
                                <div id="averageStars">★★★★★</div>
                                <span id="averageScore">0</span>
                            </div>
                            <span id="reviewCount">0 reviews</span>
                            <span class="dropdown-arrow">▼</span>
                        </div>
                    </button>

                    <!-- Dropdown Content -->
                    <div class="reviews-dropdown-content" id="reviewsContent">
                        <div class="reviews-container">
                            <h2 class="reviews-title">Customer Reviews</h2>

                            <div class="reviews-summary">
                                <div class="average-rating">
                                    <div class="average-score-large" id="averageScoreLarge">0</div>
                                    <div class="stars-large" id="averageStarsLarge">★★★★★</div>
                                    <div class="review-count-large" id="reviewCountLarge">0 reviews</div>
                                </div>

                                <div class="rating-bars">
                                    <% for(let i=5; i>= 1; i--) { %>
                                        <div class="rating-bar">
                                            <div class="bar-label">
                                                <%= i %>★
                                            </div>
                                            <div class="bar-container">
                                                <div class="bar-fill" id="bar<%= i %>" style="width: 0%"></div>
                                            </div>
                                            <div class="bar-count" id="count<%= i %>">0</div>
                                        </div>
                                        <% } %>
                                </div>
                            </div>

                            <% if (locals.user) { %>
                                <div class="review-form-container">
                                    <h3>Write a Review</h3>
                                    <form id="reviewForm">
                                        <div class="rating-input">
                                            <% for(let i=5; i>= 1; i--) { %>
                                                <input type="radio" id="star<%= i %>" name="rating" value="<%= i %>">
                                                <label for="star<%= i %>">★</label>
                                                <% } %>
                                        </div>
                                        <textarea name="review" id="reviewText" required
                                            placeholder="Share your thoughts about this product..."></textarea>
                                        <button type="submit" class="submit-review-btn">Submit Review</button>
                                    </form>
                                </div>
                                <% } else { %>
                                    <div class="login-prompt">
                                        <p>Please <a href="/login">login</a> to write a review</p>
                                    </div>
                                    <% } %>

                                        <div class="reviews-list" id="reviewsList">
                                            <!-- Reviews will be loaded here dynamically -->
                                        </div>
                        </div>
                    </div>
                </div>


            </div>
        </div>

        <div class="related-products">
            <h2 class="related-title">Related Products</h2>
            <div class="related-grid">
                <% relatedProducts.forEach(product=> { %>
                    <div class="related-product-card">
                        <a href="/productDetails?id=<%= product._id %>" class="product-link">
                            <div class="related-image-container">
                                <% if (product.productImage && product.productImage.length> 0) { %>
                                    <img src="/uploads/product-images/<%= product.productImage[0] %>"
                                        alt="<%= product.productName %>" class="related-product-image">
                                    <% } %>
                            </div>
                            <div class="related-product-info">
                                <h3 class="related-product-title">
                                    <%= product.productName %>
                                </h3>
                                <div class="related-product-price">
                                    <span class="related-original-price">₹<%= product.regularPrice %></span>
                                    <span class="related-sale-price">₹<%= product.salePrice %></span>
                                </div>
                            </div>
                        </a>
                    </div>
                    <% }); %>
            </div>
        </div>

    </div>

    <script>

        const images = [
    <% if (product.productImage && product.productImage.length > 0) { %>
        <% product.productImage.forEach((image, index) => { %>
            '/uploads/product-images/<%= image %>' <%= index < product.productImage.length - 1 ? ',' : '' %>
        <% }); %>
    <% } %>
];
        let currentImageIndex = 0;

        function updateMainImage() {
            const mainImage = document.getElementById('mainImage');
            const zoomedImage = document.getElementById('zoomedImage');

            if (mainImage && zoomedImage) {
                mainImage.src = images[currentImageIndex];
                zoomedImage.src = images[currentImageIndex];


                document.querySelectorAll('.thumbnail').forEach((thumb, index) => {
                    thumb.classList.toggle('active', index === currentImageIndex);
                });


                setTimeout(initializeZoom, 100);
            }
        }

        function prevImage() {
            if (images.length > 1) {
                currentImageIndex = currentImageIndex === 0 ? images.length - 1 : currentImageIndex - 1;
                updateMainImage();
            }
        }

        function nextImage() {
            if (images.length > 1) {
                currentImageIndex = currentImageIndex === images.length - 1 ? 0 : currentImageIndex + 1;
                updateMainImage();
            }
        }

        function selectImage(index) {
            if (index >= 0 && index < images.length) {
                currentImageIndex = index;
                updateMainImage();
            }
        }


        document.addEventListener('DOMContentLoaded', () => {
            updateMainImage();
            initializeZoom();
        });

        const quantityInput = document.getElementById('quantityInput');
        quantityInput.addEventListener('change', (e) => {
            const value = parseInt(e.target.value);
            if (value < 1) {
                e.target.value = 1;
            }
        });


        const wishlistBtn = document.getElementById('wishlistBtn');
        const heartIcon = wishlistBtn.querySelector('.heart-icon');
        let isWishlist = false;

        wishlistBtn.addEventListener('click', () => {
            isWishlist = !isWishlist;
            heartIcon.classList.toggle('active', isWishlist);
        });

        function initializeZoom() {
            const container = document.getElementById('imageContainer');
            const mainImage = document.getElementById('mainImage');
            const zoomedImage = document.getElementById('zoomedImage');

            if (!container || !mainImage || !zoomedImage) return;

            const ZOOM_LEVEL = 2; // 


            zoomedImage.style.transition = 'transform 0.1s ease-out';

            let isZoomed = false;
            let containerRect = container.getBoundingClientRect();

            function updateZoom(e) {
                if (!isZoomed) return;

                const rect = container.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;


                const xPercent = (x / rect.width) * 100;
                const yPercent = (y / rect.height) * 100;


                zoomedImage.style.transformOrigin = `${xPercent}% ${yPercent}%`;
                zoomedImage.style.transform = `scale(${ZOOM_LEVEL})`;
            }

            let touchTimeout;
            container.addEventListener('touchstart', (e) => {
                e.preventDefault();
                const touch = e.touches[0];
                isZoomed = true;
                zoomedImage.classList.add('active');
                updateZoom(touch);


                clearTimeout(touchTimeout);
                touchTimeout = setTimeout(() => {
                    isZoomed = false;
                    zoomedImage.classList.remove('active');
                }, 5000);
            });

            container.addEventListener('touchmove', (e) => {
                if (!isZoomed) return;
                e.preventDefault();
                const touch = e.touches[0];
                updateZoom(touch);
            });

            container.addEventListener('touchend', () => {
                isZoomed = false;
                zoomedImage.classList.remove('active');
                clearTimeout(touchTimeout);
            });

            container.addEventListener('mouseenter', () => {
                isZoomed = true;
                zoomedImage.classList.add('active');
                containerRect = container.getBoundingClientRect();
            });

            container.addEventListener('mousemove', updateZoom);

            container.addEventListener('mouseleave', () => {
                isZoomed = false;
                zoomedImage.classList.remove('active');
            });

           
            window.addEventListener('resize', () => {
                containerRect = container.getBoundingClientRect();
            });
        }

      
        const additionalStyles = `
.zoomed-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease-out;
    z-index: 10;
}

.zoomed-image.active {
    opacity: 1;
}

.main-image-container {
    cursor: zoom-in;
    overflow: hidden;
    position: relative;
}
`;


        const styleSheet = document.createElement("style");
        styleSheet.textContent = additionalStyles;
        document.head.appendChild(styleSheet);
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const sizeSelect = document.getElementById('sizeSelect');
            const quantityInput = document.getElementById('quantityInput');
            const addToCartBtn = document.getElementById('addToCartBtn');
            const quantityMessage = document.getElementById('quantity-message');

            let selectedVariant = null;

            sizeSelect.addEventListener('change', function () {
                const selectedOption = this.options[this.selectedIndex];

                if (!this.value) {
                    resetForm();
                    return;
                }

                const availableQuantity = parseInt(selectedOption.dataset.quantity);
                selectedVariant = {
                    size: this.value,
                    quantity: availableQuantity
                };

                quantityInput.disabled = false;
                quantityInput.max = Math.min(5, availableQuantity);
                quantityInput.value = 1;
                quantityMessage.textContent = '';
                updateAddToCartButton();
            });

            
            ['input', 'change'].forEach(eventType => {
                quantityInput.addEventListener(eventType, handleQuantityChange);
            });

            
            quantityInput.addEventListener('keydown', function (e) {
                if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {
                    setTimeout(handleQuantityChange, 0);
                }
            });

            function handleQuantityChange() {
                let value = parseInt(quantityInput.value);
                const availableQuantity = selectedVariant ? selectedVariant.quantity : 0;
                const maxAllowed = Math.min(5, availableQuantity);

                // Clear previous message
                quantityMessage.textContent = '';

                if (!value || value < 1) {
                    value = 1;
                    quantityInput.value = value;
                    quantityMessage.textContent = 'Minimum 1 item required';
                } else if (value > 5) {
                    value = 5;
                    quantityInput.value = value;
                    quantityMessage.textContent = 'Maximum 5 items allowed per order';
                } else if (value > availableQuantity) {
                    value = availableQuantity;
                    quantityInput.value = value;
                    quantityMessage.textContent = 'Not enough stock available';
                }

                updateAddToCartButton();
            }

            function resetForm() {
                quantityInput.disabled = true;
                quantityInput.value = 1;
                addToCartBtn.disabled = true;
                quantityMessage.textContent = '';
                selectedVariant = null;
            }

            function updateAddToCartButton() {
                const quantity = parseInt(quantityInput.value);
                addToCartBtn.disabled = !selectedVariant ||
                    isNaN(quantity) ||
                    quantity < 1 ||
                    quantity > Math.min(5, selectedVariant.quantity);
            }

            function showMessage(message, type) {

                alert(message);
            }

            function updateCartCount(count) {

                const cartCountElement = document.getElementById('cartCount');
                if (cartCountElement) {
                    cartCountElement.textContent = count;
                }
            }
        });

        document.addEventListener('DOMContentLoaded', function () {
            console.log('Product ID:', '<%= product._id %>');
            console.log('Is in wishlist:', '<%= isInWishlist %>');

            const addToCartBtn = document.getElementById('addToCartBtn');
            const sizeSelect = document.getElementById('sizeSelect');
            const quantityInput = document.getElementById('quantityInput');

            if (addToCartBtn) {
                addToCartBtn.onclick = function (e) {
                    e.preventDefault();

                    if (!sizeSelect.value) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Size Required',
                            text: 'Please select a size before adding to cart',
                            confirmButtonColor: '#4A665B'
                        });
                        return;
                    }

                    const quantity = parseInt(quantityInput.value);
                    if (!quantity || quantity < 1) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Invalid Quantity',
                            text: 'Please select a valid quantity',
                            confirmButtonColor: '#4A665B'
                        });
                        return;
                    }

                    if (quantity > 5) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Quantity Limit Exceeded',
                            text: 'Maximum 5 items allowed per order',
                            confirmButtonColor: '#4A665B'
                        });
                        return;
                    }

                    fetch('/addCart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            productId: '<%= product._id %>',
                            size: sizeSelect.value,
                            quantity: quantity
                        })
                    })
                        .then(response => {
                            if (response.status === 401) {
                                window.location.href = '/signin';
                                return;
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data && data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success!',
                                    text: 'Product added to cart successfully',
                                    confirmButtonColor: '#4A665B'
                                }).then((result) => {
                                    if (result.isConfirmed && data.redirect) {
                                        window.location.href = data.redirect;
                                    }
                                });
                            }
                        })
                        .catch(error => {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Please signin to continue',
                                confirmButtonColor: '#4A665B'
                            }).then(() => {

                                window.location.href = '/signin'
                            });
                        });
                };
            }


            const wishlistBtn = document.getElementById('wishlistBtn');
            if (wishlistBtn) {
                const heartIcon = wishlistBtn.querySelector('.heart-icon');
                const productId = wishlistBtn.dataset.productId;

                wishlistBtn.addEventListener('click', async function () {
                    try {
                        const isInWishlist = wishlistBtn.classList.contains('active');
                        const url = isInWishlist
                            ? `/wishlist/remove/${productId}`
                            : '/wishlist/add';

                        const method = isInWishlist ? 'DELETE' : 'POST';

                        const response = await fetch(url, {
                            method,
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: method === 'POST' ? JSON.stringify({ productId }) : undefined
                        });

                        const data = await response.json();

                        if (data.success) {
                            if (isInWishlist) {
                                heartIcon.setAttribute('fill', 'none');
                                wishlistBtn.classList.remove('active');
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Removed from Wishlist',
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                            } else {
                                heartIcon.setAttribute('fill', 'currentColor');
                                wishlistBtn.classList.add('active');
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Added to Wishlist',
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                            }
                        }
                    } catch (error) {
                        console.error('Error updating wishlist:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Please Sign in to continue!'
                        }).then(() => {

                            window.location = '/signin'
                        });
                    }
                });
            }
        });

        document.addEventListener('DOMContentLoaded', function () {
            const productId = document.querySelector('.reviews-section').dataset.productId;
            const reviewsToggle = document.getElementById('reviewsToggle');
            const reviewsContent = document.getElementById('reviewsContent');
            let reviewsLoaded = false;

            
            reviewsToggle.addEventListener('click', function () {
                const isActive = reviewsContent.classList.toggle('active');
                reviewsToggle.querySelector('.dropdown-arrow').style.transform =
                    isActive ? 'rotate(180deg)' : 'rotate(0)';

                
                if (isActive && !reviewsLoaded) {
                    loadReviews();
                    reviewsLoaded = true;
                }
            });

            async function loadReviews() {
                try {
                    const response = await fetch(`/${productId}/reviews`);
                    const data = await response.json();

                    if (data.success) {
                        updateReviewStats(data.stats);
                        displayReviews(data.reviews);
                    } else {
                        throw new Error('Failed to load reviews');
                    }
                } catch (error) {
                    console.error('Error loading reviews:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Failed to load reviews. Please try again later.',
                        confirmButtonColor: '#3b7254'
                    });
                }
            }

            function updateReviewStats(stats) {
                // Update preview (in button)
                document.getElementById('averageScore').textContent = stats.averageRating.toFixed(1);
                document.getElementById('reviewCount').textContent = `${stats.totalReviews} reviews`;

                // Update detailed view
                document.getElementById('averageScoreLarge').textContent = stats.averageRating.toFixed(1);
                document.getElementById('reviewCountLarge').textContent = `${stats.totalReviews} reviews`;

                const starsDisplay = '★'.repeat(Math.round(stats.averageRating)) +
                    '☆'.repeat(5 - Math.round(stats.averageRating));
                document.getElementById('averageStars').textContent = starsDisplay;
                document.getElementById('averageStarsLarge').textContent = starsDisplay;

                // Update bars
                for (let i = 1; i <= 5; i++) {
                    const percentage = (stats.ratingDistribution[i] / stats.totalReviews * 100) || 0;
                    document.getElementById(`bar${i}`).style.width = `${percentage}%`;
                    document.getElementById(`count${i}`).textContent = stats.ratingDistribution[i];
                }
            }

            function displayReviews(reviews) {
                const reviewsList = document.getElementById('reviewsList');
                reviewsList.innerHTML = reviews.map(review => `
            <div class="review-item">
                <div class="review-header">
                    <span class="reviewer-name">${review.userId.name}</span>
                    <span class="review-date">${new Date(review.createdAt).toLocaleDateString()}</span>
                </div>
                <div class="review-rating">
                    ${'★'.repeat(review.rating)}${'☆'.repeat(5 - review.rating)}
                </div>
                <div class="review-text">${review.review}</div>
            </div>
        `).join('');
            }

            const reviewForm = document.getElementById('reviewForm');
            if (reviewForm) {
                reviewForm.addEventListener('submit', async (e) => {
                    e.preventDefault();

                    const rating = document.querySelector('input[name="rating"]:checked')?.value;
                    const review = document.getElementById('reviewText').value;

                    if (!rating) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Rating Required',
                            text: 'Please select a rating before submitting your review',
                            confirmButtonColor: '#3b7254',
                            toast: true,
                            position: 'top-end',
                            timer: 3000,
                            timerProgressBar: true,
                            showConfirmButton: false
                        });
                        return;
                    }

                    try {
                        // Show loading state
                        Swal.fire({
                            title: 'Submitting Review...',
                            allowOutsideClick: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });

                        const response = await fetch(`/${productId}/reviews`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ rating, review })
                        });

                        const data = await response.json();

                        if (data.success) {
                            // Close loading indicator
                            Swal.close();

                            // Show success message
                            Swal.fire({
                                icon: 'success',
                                title: 'Review Submitted!',
                                text: 'Thank you for your feedback',
                                confirmButtonColor: '#3b7254',
                                toast: true,
                                position: 'top-end',
                                timer: 3000,
                                timerProgressBar: true,
                                showConfirmButton: false
                            });

                            reviewForm.reset();
                            loadReviews();
                        } else {
                            throw new Error(data.message || 'Error submitting review');
                        }
                    } catch (error) {
                        console.error('Error submitting review:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Submission Failed',
                            text: error.message || 'Failed to submit review. Please try again.',
                            confirmButtonColor: '#3b7254'
                        });
                    }
                });
            }

            // Load initial preview stats
            loadReviews();
        });
    </script>
</body>

</html>